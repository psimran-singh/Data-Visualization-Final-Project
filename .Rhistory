library(DataExplorer)
solar0 <- read_excel("Rutgers Spring 2022/Data Viz/Assignment 8/NJBPU Solar Data - TI Program.xlsx")
### STEP 1: IMPORTING DATA AND CREATING A BASE DATASET ###
#Load necessary libraries
library(tidyverse)
library(DataExplorer)
#Set Working Directory to Github folder
#Change to appropriate location if running on your own
setwd("~/GitHub/Data-Visualization-Final-Project")
#Import the datasets, one for each program
#Sourced from December'21 Monthly NJBPU Solar Registration Database
#At this URL: https://njcleanenergy.com/renewable-energy/project-activity-reports/solar-activity-report-archive
SRP_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJBPU_SRP_Data.csv",na.string=c(NA,""," "))
TI_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJBPU_TI_Data.csv",na.string=c(NA,""," "))
ADI_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJPU_ADI_Data.csv",na.string=c(NA,""," "))
#Data Cleaning: Getting correct columns to join all datasets
#We need some key variables which are in all 3 program data, we will remove the others
col_names <- c("PROGRAM","CITY","ZIP","COUNTY_CODE","INTERCONNECTION_DATE","SYSTEM_SIZE",
"CUSTOMER_TYPE","INTERCONNECTION_TYPE","THIRD_PARTY_OWNERSHIP")
SRP_Data <- SRP_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(SRP_Data) <- col_names
TI_Data <- TI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(TI_Data) <- col_names
ADI_Data <- ADI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(ADI_Data) <- col_names
#Join all the datasets to create one with all entries across all programs
#We will now perform some data cleaning on this dataset
Solar_Data0 <- rbind(SRP_Data,TI_Data,ADI_Data)
remove(SRP_Data)
remove(TI_Data)
remove(ADI_Data)
remove(col_names)
### STEP 2: CLEANING DATASET ###
#First, lets create a DataExplorer report to explore missing data, uncomment to run
#create_report(Solar_Data0)
#From the report we see that our dataset is very complete
#We have 20 observations with missing town and zip codes, we will leave these in
#They still have county codes so we may roll them up or remove later
#We will now try and match up duplicate city names
solar_mun <- unique(Solar_Data0$CITY)
#5,223 unique city names, when there are only 564 municipalities in NJ
#Maybe that's too much to clean up, and we should just use zip codes
#Reformat Zip Codes, since they're missing 0's: Not elegant but works
Solar_Data0$ZIP <- paste("0",Solar_Data0$ZIP,sep="")
Solar_Data0$ZIP[Solar_Data0$ZIP=="0NA"] <- NA
#Aggregate by Zip Code and County
View(Solar_Data0)
#Recode County_Codes and use county names instead
#Not sure where NJBPU got these codes, but they aren't handily available anywhere
#So, I manually went and searched town names in each county code and create this list
COUNTY_CODE <- c(1:21)
COUNTY <- c("Sussex","Warren","Morris","Hunterdon","Somerset","Passaic","Bergen",
"Hudson","Essex","Union","Middlesex","Mercer","Burlington","Camden",
"Gloucester","Salem","Monmouth","Ocean","Atlantic","Cumberland","Cape May")
remove(solar_mun)
#Recode County_Codes and use county names instead
#Not sure where NJBPU got these codes, but they aren't handily available anywhere
#So, I manually went and searched town names in each county code and create this list
COUNTY_CODE <- c(1:21)
COUNTY <- c("Sussex","Warren","Morris","Hunterdon","Somerset","Passaic","Bergen",
"Hudson","Essex","Union","Middlesex","Mercer","Burlington","Camden",
"Gloucester","Salem","Monmouth","Ocean","Atlantic","Cumberland","Cape May")
County_Code_Conversion <- data.frame(COUNTY_CODE,COUNTY)
remove(COUNTY_CODE,COUNTY)
Solar_Data0 <- merge(Solar_Data0,County_Code_Conversion,by=COUNTY_CODE)
Solar_Data1 <- left_join(Solar_Data0,County_Code_Conversion,by=COUNTY_CODE)
Solar_Data1 <- left_join(Solar_Data0,County_Code_Conversion,by="COUNTY_CODE"="COUNTY_CODE")
Solar_Data1 <- left_join(Solar_Data0,County_Code_Conversion,by=c("COUNTY_CODE"="COUNTY_CODE")
Solar_Data1 <- left_join(Solar_Data0,County_Code_Conversion,by=c("COUNTY_CODE"="COUNTY_CODE"))
View(Solar_Data1)
Solar_Data1 <- Solar_Data1[c(1:4,10,5:9)]
#Reformat Zip Codes, since they're missing 0's: Not elegant but works
Solar_Data1$ZIP <- paste("0",Solar_Data0$ZIP,sep="")
Solar_Data1$ZIP[Solar_Data0$ZIP=="0NA"] <- NA
### STEP 1: IMPORTING DATA AND CREATING A BASE DATASET ###
#Load necessary libraries
library(tidyverse)
library(DataExplorer)
#Set Working Directory to Github folder
#Change to appropriate location if running on your own
setwd("~/GitHub/Data-Visualization-Final-Project")
#Import the datasets, one for each program
#Sourced from December'21 Monthly NJBPU Solar Registration Database
#At this URL: https://njcleanenergy.com/renewable-energy/project-activity-reports/solar-activity-report-archive
SRP_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJBPU_SRP_Data.csv",na.string=c(NA,""," "))
TI_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJBPU_TI_Data.csv",na.string=c(NA,""," "))
ADI_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJPU_ADI_Data.csv",na.string=c(NA,""," "))
#Data Cleaning: Getting correct columns to join all datasets
#We need some key variables which are in all 3 program data, we will remove the others
col_names <- c("PROGRAM","CITY","ZIP","COUNTY_CODE","INTERCONNECTION_DATE","SYSTEM_SIZE",
"CUSTOMER_TYPE","INTERCONNECTION_TYPE","THIRD_PARTY_OWNERSHIP")
SRP_Data <- SRP_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(SRP_Data) <- col_names
TI_Data <- TI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(TI_Data) <- col_names
ADI_Data <- ADI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(ADI_Data) <- col_names
#Join all the datasets to create one with all entries across all programs
#We will now perform some data cleaning on this dataset
Solar_Data0 <- rbind(SRP_Data,TI_Data,ADI_Data)
remove(SRP_Data)
remove(TI_Data)
remove(ADI_Data)
remove(col_names)
### STEP 2: CLEANING DATASET ###
#First, lets create a DataExplorer report to explore missing data
#Uncomment to run:
#create_report(Solar_Data0)
#From the report we see that our dataset is very complete
#We have 20 observations with missing town and zip codes, we will leave these in
#They still have county codes so we may roll them up or remove later
#Recode County_Codes and use county names instead
#Not sure where NJBPU got these codes, but they aren't handily available anywhere
#So, I manually went and searched town names in each county code and create this list
COUNTY_CODE <- c(1:21)
COUNTY <- c("Sussex","Warren","Morris","Hunterdon","Somerset","Passaic","Bergen",
"Hudson","Essex","Union","Middlesex","Mercer","Burlington","Camden",
"Gloucester","Salem","Monmouth","Ocean","Atlantic","Cumberland","Cape May")
County_Code_Conversion <- data.frame(COUNTY_CODE,COUNTY)
remove(COUNTY_CODE,COUNTY)
Solar_Data1 <- left_join(Solar_Data0,County_Code_Conversion,by=c("COUNTY_CODE"="COUNTY_CODE"))
Solar_Data1 <- Solar_Data1[c(1:4,10,5:9)]
#Reformat Zip Codes, since they're missing 0's: Not elegant but works
Solar_Data1$ZIP <- paste("0",Solar_Data1$ZIP,sep="")
Solar_Data1$ZIP[Solar_Data1$ZIP=="0NA"] <- NA
remove(Solar_Data0)
remove(County_Code_Conversion)
View(Solar_Data1)
#Aggregate by Zip Code for all CUSTOMER_TYPE
Solar_All_Zip <- Solar_Data1 %>%
group_by(ZIP,CUSTOMER_TYPE,INTERCONNECTION_TYPE,THIRD_PARTY_OWNERSHIP) %>%
summarize(CAPACITY = SUM(SYSTEM_SIZE,na.rm=TRUE),
COUNT=n())
#Aggregate by Zip Code for all CUSTOMER_TYPE
Solar_All_Zip <- Solar_Data1 %>%
group_by(ZIP,CUSTOMER_TYPE,INTERCONNECTION_TYPE,THIRD_PARTY_OWNERSHIP) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE),
COUNT=n())
View(Solar_All_Zip)
remove(Solar_All_Zip)
#Aggregate by Zip Code for all CUSTOMER_TYPE
Solar_All_Zip <- Solar_Data1 %>% group_by(ZIP) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE),
COUNT=n())
#Aggregate by COUNTY for only RESIDENTIAL
Solar_All_County <- Solar_Data1 %>% filter(CUSTOMER_TYPE=="Residential")
#Aggregate by COUNTY for only RESIDENTIAL
Solar_Res_County <- Solar_Data1 %>% filter(CUSTOMER_TYPE=="Residential")
#Aggregate by COUNTY for all CUSTOMER_TYPE
Solar_All_County <- Solar_Data1 %>% group_by(COUNTY) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
remove(Solar_All_Zip)
View(Solar_Res_County)
#Aggregate by COUNTY for only RESIDENTIAL
Solar_Res_County <- Solar_Data1 %>% filter(CUSTOMER_TYPE=="Residential") %>%
group_by(COUNTY) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
View(Solar_Res_County)
View(Solar_All_County)
View(Solar_All_County)
View(Solar_Res_County)
#Import the datasets, one for each program
#Sourced from December'21 Monthly NJBPU Solar Registration Database
MODIV_Data <- st_read("~/Rutgers Spring 2022/Data Viz/Final Project/Statewide_Parcels_MODIV.gdb",
layer="Cad_parcel_mod4")
library(sf)
#Load necessary libraries
library(tidyverse)
#Import the datasets, one for each program
#Sourced from December'21 Monthly NJBPU Solar Registration Database
MODIV_Data <- st_read("~/Rutgers Spring 2022/Data Viz/Final Project/Statewide_Parcels_MODIV.gdb",
layer="Cad_parcel_mod4")
Zip_Shapes <- st_read("~/Rutgers Spring 2022/Data Viz/Final Project/zip_poly.gdb",
layer="zip_poly")
names(MODIV_Data)
### STEP 2: LIMIT TO RESIDENTIAL AND REMOVE COLUMNS WE DON'T NEED ###
#Since we will aggregate at zip code and county levels, we will keep those variables
#We will also filter by PROP_CLASS in order to limit our dataset to residential properties
MODIV_Data <- MODIV_Data %>% filter(PROP_CLASS==2)
MODIV_Data <- MODIV_Data_Res %>% select("PROP_CLASS","COUNTY","SHAPE_Length","SHAPE_Area","SHAPE")
MODIV_Data <- MODIV_Data %>% select("PROP_CLASS","COUNTY","SHAPE_Length","SHAPE_Area","SHAPE")
### STEP 5: ADD ZIP CODES BY SPATIAL JOIN ###
MODIV_Date_Zip <- st_join(MODIV_Data,Zip_Shapes,largest=TRUE)
MODIV_Data <- MODIV_Data %>% st_transform(4326)
Zip_Shapes <- Zip_Shapes %>% st_transform(4326)
View(Zip_Shapes)
#Now, join the two spatially join the two datasets with largest overlay as true
MODIV_Date_Zip <- st_join(MODIV_Data,Zip_Shapes,largest=TRUE)
#Now, join the two spatially join the two datasets with largest overlay as true
MODIV_Data_Zip <- st_join(MODIV_Data,Zip_Shapes,largest=TRUE)
#Now, join the two spatially join the two datasets with largest overlay as true
MODIV_Data_Zip <- st_join(MODIV_Data,Zip_Shapes,join=st_within,largest=TRUE)
sf::sf_use_s2(FALSE)
MODIV_Data_Zip <- st_join(MODIV_Data,Zip_Shapes,join=st_within,largest=TRUE)
#Now, join the two spatially join the two datasets with largest overlay as true
sf::sf_use_s2(TRUE)
library(tidyverse)
library(sf)
MODIV_Data
### STEP 5: ADD ZIP CODES BY SPATIAL JOIN ###
#First let's makes sure the coordinate reference systems are the same between the two datasets
#There are some data issues with MODIV_Data, where not everything is a "MULTIPOLYGON"
#This leads to errors, so we cast the whole table to be "MULTIPOLYGON"
MODIV_Data <- MODIV_Data %>% st_transform(4326) %>% st_cast("MULTIPOLYGON") %>% st_centroid()
#Now, join the two spatially join the two datasets with largest overlay as true
#We run into some issues with spherical geometry, so we use sf_use_s2 to FALSE
#This is a common fix found online: https://github.com/r-spatial/sf/issues/1762
sf::sf_use_s2(FALSE)
MODIV_Data <- MODIV_Data %>% st_transform(4326) %>% st_cast("MULTIPOLYGON") %>% st_centroid()
MODIV_Data
MODIV_Data_Zip <- st_join(MODIV_Data,Zip_Shapes,join=st_intersects)
View(MODIV_Data_Zip)
### STEP 4: AGGREGATE TO COUNTY, ZIP CODE LEVELS ###
MODIV_County <- MODIV_Data %>% group_by(COUNTY) %>% summarise(COUNT=length(PROP_CLASS))
group_by(COUNTY) %>%
summarise(COUNT=length(PROP_CLASS))
### STEP 4: AGGREGATE TO COUNTY, ZIP CODE LEVELS ###
MODIV_County <- MODIV_Data_Zip %>%
select("PROP_CLASS","COUNTY") %>%
group_by(COUNTY) %>%
summarise(COUNT=length(PROP_CLASS))
View(MODIV_County)
### STEP 4: AGGREGATE TO COUNTY, ZIP CODE LEVELS ###
MODIV_County <- MODIV_Data_Zip %>%
st_drop_geometry() %>%
select("PROP_CLASS","COUNTY") %>%
group_by(COUNTY) %>%
summarise(COUNT=length(PROP_CLASS))
### STEP 4: AGGREGATE TO COUNTY, ZIP CODE LEVELS ###
MODIV_County <- MODIV_Data_Zip %>%
st_drop_geometry() %>%
select("PROP_CLASS","COUNTY") %>%
group_by(COUNTY) %>%
summarise(COUNT=length(PROP_CLASS))
### STEP 4: AGGREGATE TO COUNTY, ZIP CODE LEVELS ###
MODIV_County <- MODIV_Data_Zip %>%
st_drop_geometry() %>%
select("PROP_CLASS","COUNTY") %>%
group_by(COUNTY) %>%
summarise(COUNT=length(PROP_CLASS))
MODIV_County <- MODIV_Data_Zip %>%
st_drop_geometry() %>%
select("PROP_CLASS","COUNTY") %>%
group_by(COUNTY) %>%
summarise(COUNT=length(PROP_CLASS))
MODIV_Data_Flat <- MODIV_Data_Zip %>% st_drop_geometry()
MODIV_County <- MODIV_Data_Zip %>%
st_drop_geometry() %>%
select("PROP_CLASS","COUNTY") %>%
group_by(COUNTY) %>%
summarise(COUNT=length(PROP_CLASS))
View(MODIV_Data_Flat)
MODIV_County <- MODIV_Data_Zip %>%
select("PROP_CLASS","COUNTY") %>%
group_by(COUNTY) %>%
summarise(COUNT=length(PROP_CLASS))
MODIV_County <- MODIV_Data_Flat %>%
select("PROP_CLASS","COUNTY") %>%
group_by(COUNTY) %>%
summarise(COUNT=length(PROP_CLASS))
MODIV_ZIP <- MODIV_Data_Flat %>%
select("PROP_CLASS","ZIP_CODE") %>%
group_by(COUNTY) %>%
summarise(COUNT=length(ZIP_CODE))
MODIV_ZIP <- MODIV_Data_Flat %>%
select("PROP_CLASS","ZIP_CODE") %>%
group_by(ZIP_CODE) %>%
summarise(COUNT=length(ZIP_CODE))
View(MODIV_ZIP)
write_csv(MODIV_County,file="MODIV_County.csv")
write_csv(MODIV_ZIP,file="MODIV_Zip.csv")
### STEP 1: IMPORTING DATA AND CREATING A BASE DATASET ###
#Load necessary libraries
library(tidyverse)
library(DataExplorer)
#Set Working Directory to Github folder
#Change to appropriate location if running on your own
setwd("~/GitHub/Data-Visualization-Final-Project")
#Import the datasets, one for each program
#Sourced from December'21 Monthly NJBPU Solar Registration Database
#At this URL: https://njcleanenergy.com/renewable-energy/project-activity-reports/solar-activity-report-archive
SRP_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJBPU_SRP_Data.csv",na.string=c(NA,""," "))
TI_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJBPU_TI_Data.csv",na.string=c(NA,""," "))
ADI_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJPU_ADI_Data.csv",na.string=c(NA,""," "))
#Data Cleaning: Getting correct columns to join all datasets
#We need some key variables which are in all 3 program data, we will remove the others
col_names <- c("PROGRAM","CITY","ZIP","COUNTY_CODE","INTERCONNECTION_DATE","SYSTEM_SIZE",
"CUSTOMER_TYPE","INTERCONNECTION_TYPE","THIRD_PARTY_OWNERSHIP")
SRP_Data <- SRP_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(SRP_Data) <- col_names
TI_Data <- TI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(TI_Data) <- col_names
ADI_Data <- ADI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(ADI_Data) <- col_names
#Join all the datasets to create one with all entries across all programs
#We will now perform some data cleaning on this dataset
Solar_Data0 <- rbind(SRP_Data,TI_Data,ADI_Data)
remove(SRP_Data)
remove(TI_Data)
remove(ADI_Data)
remove(col_names)
### STEP 2: CLEANING DATASET ###
#First, lets create a DataExplorer report to explore missing data
#Uncomment to run:
#create_report(Solar_Data0)
#From the report we see that our dataset is very complete
#We have 20 observations with missing town and zip codes, we will leave these in
#They still have county codes so we may roll them up or remove later
#Recode County_Codes and use county names instead
#Not sure where NJBPU got these codes, but they aren't handily available anywhere
#So, I manually went and searched town names in each county code and create this list
COUNTY_CODE <- c(1:21)
COUNTY <- c("Sussex","Warren","Morris","Hunterdon","Somerset","Passaic","Bergen",
"Hudson","Essex","Union","Middlesex","Mercer","Burlington","Camden",
"Gloucester","Salem","Monmouth","Ocean","Atlantic","Cumberland","Cape May")
County_Code_Conversion <- data.frame(COUNTY_CODE,COUNTY)
remove(COUNTY_CODE,COUNTY)
Solar_Data1 <- left_join(Solar_Data0,County_Code_Conversion,by=c("COUNTY_CODE"="COUNTY_CODE"))
Solar_Data1 <- Solar_Data1[c(1:4,10,5:9)]
#Reformat Zip Codes, since they're missing 0's: Not elegant but works
Solar_Data1$ZIP <- paste("0",Solar_Data1$ZIP,sep="")
Solar_Data1$ZIP[Solar_Data1$ZIP=="0NA"] <- NA
remove(County_Code_Conversion)
remove(Solar_Data0)
#Aggregate by COUNTY for all CUSTOMER_TYPE
Solar_All_County <- Solar_Data1 %>%
group_by(COUNTY,CUSTOMER_TYPE) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
#Aggregate by COUNTY for all CUSTOMER_TYPE
Solar_All_County <- Solar_Data1 %>%
group_by(COUNTY) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
#Aggregate by COUNTY for only RESIDENTIAL
Solar_Res_County <- Solar_Data1 %>%
filter(CUSTOMER_TYPE=="Residential") %>%
group_by(COUNTY) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
View(Solar_Data1)
#Aggregate by Zip Code for all CUSTOMER_TYPE
Solar_All_Zip <- Solar_Data1 %>%
group_by(ZIP,CUSTOMER_TYPE) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
#Aggregate by Zip Code for only RESIDENTIAL
Solar_Res_Zip <- Solar_Data1 %>%
filter(CUSTOMER_TYPE=="Residential") %>%
group_by(ZIP) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
View(Solar_Data1)
View(MODIV_County)
View(Solar_Res_County)
#Join county tables
Solar_Rates_County <- left_join(Solar_Res_County,MODIV_County,COUNTY)
#Join county tables
Solar_Rates_County <- left_join(Solar_Res_County,MODIV_County,by=COUNTY)
#Join county tables
Solar_Rates_County <- left_join(Solar_Res_County,MODIV_County,by="COUNTY")
View(Solar_Rates_County)
View(Solar_Rates_County)
View(MODIV_County)
#Join county tables
#Lets match the case between the datasets first
Solar_Res_County$COUNTY <= toupper(Solar_Res_County$COUNTY)
#Join county tables
#Lets match the case between the datasets first
Solar_Res_County$COUNTY <- toupper(Solar_Res_County$COUNTY)
Solar_Rates_County <- left_join(Solar_Res_County,MODIV_County,by="COUNTY")
#Calculate solar adoption rates
Solar_Rates_County$RATE <- Solar_Rates_County$COUNT.x/Solar_Rates_County$COUNT.y
#Join county tables
#Lets match the case between the datasets first
Solar_Res_County$COUNTY <- toupper(Solar_Res_County$COUNTY)
Solar_Rates_County <- left_join(Solar_Res_County,MODIV_County,by="COUNTY")
#Calculate solar adoption rates
Solar_Rates_County <- Solar_Rates_County %>%
rename(SOLAR_COUNT=COUNT.x,PARCEL_COUNT=COUNT.y) %>%
mutate(ADOPTION_RATE=COUNT.x/COUNT.y)
#Calculate solar adoption rates
Solar_Rates_County <- Solar_Rates_County %>%
rename(SOLAR_COUNT=COUNT.x,PARCEL_COUNT=COUNT.y) %>%
mutate(ADOPTION_RATE=SOLAR_COUNT/PARCEL_COUNT)
View(MODIV_ZIP)
View(Solar_Res_Zip)
#Join ZIP tables
Solar_Res_Zip <- Solar_Res_Zip %>% rename(ZIP_CODE=ZIP)
Solar_Rates_Zip <- left_join(Solar_Res_ZIP,MODIV_ZIP,by="ZIP_CODE")
Solar_Rates_Zip <- left_join(Solar_Res_ZIP,MODIV_ZIP,by="ZIP_CODE")
#Join ZIP tables
Solar_Res_Zip <- Solar_Res_Zip %>% rename(ZIP_CODE=ZIP)
View(Solar_Res_Zip)
View(Solar_Res_Zip)
Solar_Rates_Zip <- left_join(Solar_Res_ZIP,MODIV_ZIP,by="ZIP_CODE")
Solar_Res_Zip
Solar_Rates_Zip <- left_join(Solar_Res_ZIP,MODIV_ZIP,by="ZIP_CODE")
Solar_Rates_Zip <- left_join(Solar_Res_Zip,MODIV_ZIP,by="ZIP_CODE")
View(Solar_Rates_Zip)
#Calculate county solar adoption rates
Solar_Rates_Zip <- Solar_Rates_Zip %>%
rename(SOLAR_COUNT=COUNT.x,PARCEL_COUNT=COUNT.y) %>%
mutate(ADOPTION_RATE=SOLAR_COUNT/PARCEL_COUNT)
View(Zip_Shapes)
Zip_Shapes %>% filter(STATE=="NJ") %>% count()
library(DataExplorer)
#Lets check how good our join is
create_report(MODIV_Data_Flat)
create_report(MODIV_ZIP)
View(MODIV_ZIP)
View(Solar_Rates_Zip)
create_report(Solar_Rates_Zip)
View(MODIV_ZIP)
View(Solar_Rates_Zip)
zipcode_proj_nj <- read.csv("~/GitHub/Data-Visualization-Final-Project/For Validation/zipcode_proj_nj.txt")
View(zipcode_proj_nj)
write_csv(zipcode_proj_nj,file="adoption_by_zip")
write_csv(zipcode_proj_nj,file="adoption_by_zip.csv")
write_csv(zipcode_proj_nj,file="~/GitHub/Data-Visualization-Final-Project/For Validation/adoption_by_zip.csv")
View(Solar_Rates_Zip)
View(Zip_Shapes)
Zip_Shapes %>% filter(ZIP==07007)
View(Solar_Rates_County)
View(Solar_Rates_Zip)
View(Solar_All_County)
View(Solar_Res_Zip)
remove(MODIV_Data)
remove(MODIV_Data_Zip)
remove(Zip_Shapes)
remove(zipcode_proj_nj)
remove(Solar_All_Zip)
View(Solar_Res_County)
sum(Solar_Res_County$CAPACITY)
sum(Solar_Res_Zip$CAPACITY)
sum(Solar_All_County$CAPACITY)
install.packages('blogdown')
blogdown::install_hugo()
colnames(quantity) <- c("Year",
"Residential Quantity",
"Non-Residential Quantity",
"Grid Supply Quantity",
"Residential Quantity (Cumulative)",
"Non-Residential Quantity (Cumulative)",
"Grid Supply Quantity (Cumulative)")
capacity <- read_csv("Capacity Trend (MW).csv")
quantity <- read_csv("Quantity Trend.csv")
colnames(capacity) <- c("Year",
"Residential Capacity",
"Non-Residential Capacity",
"Grid Supply Capacity",
"Residential Capacity (Cumulative)",
"Non-Residential Capacity (Cumulative)",
"Grid Supply Capacity (Cumulative)")
setwd("~/GitHub/Data-Visualization-Final-Project/Data Files for Analysis")
capacity <- read_csv("Capacity Trend (MW).csv")
quantity <- read_csv("Quantity Trend.csv")
library(plotly)
library(tidyverse)
setwd("~/GitHub/Data-Visualization-Final-Project/Data Files for Analysis")
capacity <- read_csv("Capacity Trend (MW).csv")
quantity <- read_csv("Quantity Trend.csv")
colnames(capacity) <- c("Year",
"Residential Capacity",
"Non-Residential Capacity",
"Grid Supply Capacity",
"Residential Capacity (Cumulative)",
"Non-Residential Capacity (Cumulative)",
"Grid Supply Capacity (Cumulative)")
colnames(quantity) <- c("Year",
"Residential Quantity",
"Non-Residential Quantity",
"Grid Supply Quantity",
"Residential Quantity (Cumulative)",
"Non-Residential Quantity (Cumulative)",
"Grid Supply Quantity (Cumulative)")
data <- cbind(capacity, quantity[c(2:7)])
write_csv(data, file="Trend.csv")
# Load in all the data we need
setwd("~/GitHub/Data-Visualization-Final-Project/Data Files for Analysis")
trend <- read_csv('Trend.csv')
View(trend)
remove(trend)
```{r setup, include = FALSE, context = "server"}
bslib::bs_themer()
```
packages(bslib)
library(bslib)
remotes::install_github("rstudio/bslib")
shiny::bootstrapLib()
