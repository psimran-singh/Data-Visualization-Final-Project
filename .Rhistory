color = "yellow")
View(Solar_Rates_County)
library(flexdashboard)
library(tidyverse)
library(shiny)
library(plotly)
library(formattable)
library(DT)
library(lubridate)
library(xts)
library(dygraphs)
library(nivocal)
setwd("~/GitHub/Data-Visualization-Final-Project/Data Files for Analysis")
## Section 2: Overall Trends ##
# Load in all the data we need
trend <- read_csv('Trend.csv')
trend_trans <- read_csv('Trend_Transposed.csv')
trend_yoy <- read_csv('Trend_Percents.csv')
co2 <- read_csv('KW_CO2_Conversions.csv')
remove(fig)
View(trend_yoy)
trend_yoy <- read_csv('Trend_Percents.csv')
View(Solar_Rates_County)
county_level <- read_csv('Solar + Census Data - COUNTY.csv')
View(county_level)
## Section 1: Overall Landscape ##
# Load in all the data we need
county_level_rates <- read_csv('County_Totals.csv')
remove(county_level)
write_csv(MODIV_Data_Flat,"MODIV_Data_Flat.csv")
write_csv(MODIV_County, "MODIV_County.csv")
write_csv(MODIV_ZIP, "MODIV_ZIP.csv")
remove(MODIV_Data_Flat)
remove(MODIV_County)
remove(MODIV_ZIP)
remove(quantity)
remove(capacity)
View(data)
remove(data)
View(Solar_Rates_County)
remove(Solar_All_County)
remove(Solar_Rates_County)
View(Solar_Res_County)
remove(Solar_Res_County)
remove(Solar_Res_Zip)
remove(Solar_Rates_Zip)
View(Solar_Data1)
remove(Solar_Data1)
View(co2)
View(county_level_rates)
## Section 1: Overall Landscape ##
# Load in all the data we need
county_level_rates <- read_csv('County_Totals.csv')
## Section 1: Overall Landscape ##
# Load in all the data we need
county_level_rates <- read_csv('County_Totals.csv')
View(county_level_rates)
View(county_level_rates)
county_level_sectors <- read_csv('County_Sectors.csv')
library(tidyverse)
county_level_sectors <- read_csv('County_Sectors.csv')
setwd("~/GitHub/Data-Visualization-Final-Project/Data Files for Analysis")
## Section 1: Overall Landscape ##
# Load in all the data we need
county_level_rates <- read_csv('County_Totals.csv')
county_level_sectors <- read_csv('County_Sectors.csv')
View(county_level_sectors)
fig <- plot_ly(county_level_data, x = county_level_data$`County`, y = county_level_data$`cap_res`,
type = "bar", color = "orange", name = "Residential")  %>%
add_trace(y = county_level_data$`cap_nonres`, name = 'Non-Residential') %>%
add_trace(y = county_level_data$`cap_gs`, name = 'Grid Supply') %>%
layout(yaxis = list(title = "Capacity (MW)"),
xaxis = list(title = "Year", tickangle = -45, tickmode = 'linear', limits=c(2000,2021)),
hovermode='x', barmode = "stack")
county_level_sectors0 <- county_level_sectors %>% filter(County != "Overall") %>%
grepl(selected = ifelse(County == input$County, TRUE, FALSE))
input$County == "Middlesex"
input <- data.frame()
input$County == "Middlesex"
View(input)
input <- data.frame(c("County"))
input$County == "Middlesex"
input <- data.frame("County")
View(input)
colnames(input) <- "County"
input$County == "Middlesex"
input$County = "Middlesex"
county_level_sectors0 <- county_level_sectors %>% filter(County != "Overall") %>%
grepl(selected = ifelse(County == input$County, TRUE, FALSE))
county_level_sectors0 <- county_level_sectors %>% filter(County != "Overall") %>%
mutate(selected = ifelse(County == input$County, TRUE, FALSE))
View(county_level_sectors0)
colors <- county_level_sectors0 %>% select(selected) %>%
mutate(res_color = ifelse(selected == TRUE, "#6367CE", "#9FA3F2")) %>%
mutate(nonres_color = ifelse(selected == TRUE, "#F1A73E", "#F7C57D")) %>%
mutate(gs_color = ifelse(selected == TRUE, "#4DBA37", "#89EA76"))
View(colors)
View(county_level_sectors)
## Section 3: Residential Landscape ##
load("Solar_Res_County.Rda")
setwd("~/GitHub/Data-Visualization-Final-Project/Data Files for Analysis")
## Section 1: Overall Landscape ##
# Load in all the data we need
load("Solar_All_County.Rda")
county_level_rates <- read_csv('County_Totals.csv')
county_level_sectors <- read_csv('County_Sectors.csv')
Solar_All_County <- st_as_sf(Solar_All_County) %>% st_transform(4326)
Solar_Res_County <- st_as_sf(Solar_Res_County) %>% st_transform(4326)
## Section 2: Overall Trends ##
# Load in all the data we need
trend <- read_csv('Trend.csv')
trend_trans <- read_csv('Trend_Transposed.csv')
trend_yoy <- read_csv('Trend_Percents.csv')
## Section 3: Residential Landscape ##
load("Solar_Res_County.Rda")
View(Solar_Res_County)
load("Solar_Res_County.Rda")
Solar_Res_County <- st_as_sf(Solar_Res_County) %>% st_transform(4326) %>%
mutate(CAPACITY_MW=CAPACITY/1000)
library(flexdashboard)
library(tidyverse)
library(shiny)
library(plotly)
library(formattable)
library(DT)
library(lubridate)
library(xts)
library(dygraphs)
library(nivocal)
library(sf)
library(RColorBrewer)
library(leaflet)
library(htmltools)
# Load in all the necessary data tables:
setwd("~/GitHub/Data-Visualization-Final-Project/Data Files for Analysis")
## Section 1: Overall Landscape ##
load("Solar_All_County.Rda")
county_level_rates <- read_csv('County_Totals.csv')
county_level_sectors <- read_csv('County_Sectors.csv')
Solar_All_County <- st_as_sf(Solar_All_County) %>% st_transform(4326)
## Section 2: Overall Trends ##
trend <- read_csv('Trend.csv')
trend_trans <- read_csv('Trend_Transposed.csv')
trend_yoy <- read_csv('Trend_Percents.csv')
## Section 3: Residential Landscape ##
load("Solar_Res_County.Rda")
Solar_Res_County <- st_as_sf(Solar_Res_County) %>% st_transform(4326) %>%
mutate(CAPACITY_MW=CAPACITY/1000)
View(Solar_Res_County)
View(Solar_Res_County)
View(county_level_sectors)
View(county_level_sectors0)
pal3 <- colorBin(palette = "Oranges", domain = Solar_Res_County$CAPACITY_MW)
labs3 <- as.list(paste(Solar_Res_County$County,round(Solar_Res_County$CAPACITY_MW)," MW"))
map3 <- leaflet(options = leafletOptions(zoomControl = FALSE,
dragging = FALSE,
minZoom = 7.3,
maxZoom = 7.3)) %>%
addPolygons(data = Solar_Res_County,
label = lapply(labs3, HTML), # hover label
color = "grey", # the color of the border
fillColor = ~pal3(Solar_Res_County$CAPACITY_MW), # the colors inside the polygons
weight = 1.0, # the thickness of the border lines
opacity = 1.0, # the transparency of the border lines
fillOpacity = 1.0) %>%
addLegend(data = Solar_Res_County, # the dataset
"bottomright", # where to put the legend
pal = pal3, values = ~CAPACITY_MW, # specify the color palette and the range of values
title = "Capacity (MW)", # legend title
opacity = 1.0)
map3
Overall_Adoption_Rate <- Solar_Res_County %>% select(COUNTY,CAPACITY,Total_Occ_House) %>%
adorn_totals() %>% filter(COUNTY=="Total")
install.packages("janitor")
Overall_Adoption_Rate <- Solar_Res_County %>% select(COUNTY,CAPACITY,Total_Occ_House) %>%
adorn_totals() %>% filter(COUNTY=="Total")
library(tidyverse)
Overall_Adoption_Rate <- Solar_Res_County %>% select(COUNTY,CAPACITY,Total_Occ_House) %>%
adorn_totals("row") %>% filter(COUNTY=="Total")
library(janitor)
Overall_Adoption_Rate <- Solar_Res_County %>% select(COUNTY,CAPACITY,Total_Occ_House) %>%
adorn_totals("row") %>% filter(COUNTY=="Total")
Overall_Adoption_Rate <- Solar_Res_County %>% st_drop_geometry() %>%
select(COUNTY,CAPACITY,Total_Occ_House) %>%
adorn_totals("row") %>% filter(COUNTY=="Total")
View(Overall_Adoption_Rate)
Overall_Adoption_Rate <- Solar_Res_County %>% st_drop_geometry() %>%
select(COUNTY,COUNT,Total_Occ_House) %>%
adorn_totals("row") %>% filter(COUNTY=="Total") %>%
mutate(Adoption_Rate=COUNT/Total_Occ-House)
Overall_Adoption_Rate <- Solar_Res_County %>% st_drop_geometry() %>%
select(COUNTY,COUNT,Total_Occ_House) %>%
adorn_totals("row") %>% filter(COUNTY=="Total") %>%
mutate(Adoption_Rate=COUNT/Total_Occ-_ouse)
Overall_Adoption_Rate <- Solar_Res_County %>% st_drop_geometry() %>%
select(COUNTY,COUNT,Total_Occ_House) %>%
adorn_totals("row") %>% filter(COUNTY=="Total") %>%
mutate(Adoption_Rate=COUNT/Total_Occ_House)
View(Overall_Adoption_Rate)
View(map3)
View(county_level_rates)
colors1 <- county_level_sectors %>%
select(County) %>%
mutate(res_color = "#6367CE") %>%
mutate(nonres_color = "#F1A73E") %>%
mutate(gs_color = "#4DBA37")
View(colors1)
#Make the color and sector level tables
county_level_sectors0 <- county_level_sectors %>% filter(County!="Overall")
View(county_level_sectors0)
### STEP 1: IMPORTING DATA AND CREATING A BASE DATASET ###
#Load necessary libraries
library(tidyverse)
library(DataExplorer)
#Set Working Directory to Github folder
#Change to appropriate location if running on your own
setwd("~/GitHub/Data-Visualization-Final-Project")
#Import the datasets, one for each program
#Sourced from December'21 Monthly NJBPU Solar Registration Database
#At this URL: https://njcleanenergy.com/renewable-energy/project-activity-reports/solar-activity-report-archive
SRP_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJBPU_SRP_Data.csv",na.string=c(NA,""," "))
TI_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJBPU_TI_Data.csv",na.string=c(NA,""," "))
ADI_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJPU_ADI_Data.csv",na.string=c(NA,""," "))
#Data Cleaning: Getting correct columns to join all datasets
#We need some key variables which are in all 3 program data, we will remove the others
col_names <- c("PROGRAM","CITY","ZIP","COUNTY_CODE","INTERCONNECTION_DATE","SYSTEM_SIZE",
"CUSTOMER_TYPE","INTERCONNECTION_TYPE","THIRD_PARTY_OWNERSHIP")
SRP_Data <- SRP_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(SRP_Data) <- col_names
TI_Data <- TI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(TI_Data) <- col_names
ADI_Data <- ADI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(ADI_Data) <- col_names
#Join all the datasets to create one with all entries across all programs
#We will now perform some data cleaning on this dataset
Solar_Data0 <- rbind(SRP_Data,TI_Data,ADI_Data)
remove(SRP_Data)
remove(TI_Data)
remove(ADI_Data)
remove(col_names)
### STEP 2: CLEANING DATASET ###
#First, lets create a DataExplorer report to explore missing data
#Uncomment to run:
#create_report(Solar_Data0)
#From the report we see that our dataset is very complete
#We have 20 observations with missing town and zip codes, we will leave these in
#They still have county codes so we may roll them up or remove later
#Recode County_Codes and use county names instead
#Not sure where NJBPU got these codes, but they aren't handily available anywhere
#So, I manually went and searched town names in each county code and create this list
COUNTY_CODE <- c(1:21)
COUNTY <- c("Sussex","Warren","Morris","Hunterdon","Somerset","Passaic","Bergen",
"Hudson","Essex","Union","Middlesex","Mercer","Burlington","Camden",
"Gloucester","Salem","Monmouth","Ocean","Atlantic","Cumberland","Cape May")
County_Code_Conversion <- data.frame(COUNTY_CODE,COUNTY)
remove(COUNTY_CODE,COUNTY)
Solar_Data1 <- left_join(Solar_Data0,County_Code_Conversion,by=c("COUNTY_CODE"="COUNTY_CODE"))
Solar_Data1 <- Solar_Data1[c(1:4,10,5:9)]
#Reformat Zip Codes, since they're missing 0's: Not elegant but works
Solar_Data1$ZIP <- paste("0",Solar_Data1$ZIP,sep="")
Solar_Data1$ZIP[Solar_Data1$ZIP=="0NA"] <- NA
remove(County_Code_Conversion)
remove(Solar_Data0)
### STEP 3: AGGREGATE DATA ###
#Aggregate COUNTY, THIRD_PARTY_OWNERSHIP for only RESIDENTIAL
Solar_TPO_County <- Solar_Data1 %>%
filter(CUSTOMER_TYPE=="Residential") %>%
group_by(COUNTY, THIRD_PARTY_OWNERSHIP) %>%
summarize(COUNT = n()) %>%
mutate(FREQ = COUNT / sum(COUNT)) %>%
filter(THIRD_PARTY_OWNERSHIP == "Yes") %>%
select(COUNTY,TPO_FREQ = FREQ)
#Aggregate by COUNTY for only RESIDENTIAL
Solar_Res_County <- Solar_Data1 %>%
filter(CUSTOMER_TYPE=="Residential") %>%
group_by(COUNTY) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
#Aggregate by Zip Code for only RESIDENTIAL
Solar_Res_Zip <- Solar_Data1 %>%
filter(CUSTOMER_TYPE=="Residential") %>%
group_by(ZIP) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
remove(Solar_Data1)
### STEP 1: IMPORTING DATA AND CREATING A BASE DATASET ###
#Load necessary libraries
library(tidyverse)
library(DataExplorer)
#Set Working Directory to Github folder
#Change to appropriate location if running on your own
setwd("~/GitHub/Data-Visualization-Final-Project")
#Import the datasets, one for each program
#Sourced from December'21 Monthly NJBPU Solar Registration Database
#At this URL: https://njcleanenergy.com/renewable-energy/project-activity-reports/solar-activity-report-archive
SRP_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJBPU_SRP_Data.csv",na.string=c(NA,""," "))
TI_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJBPU_TI_Data.csv",na.string=c(NA,""," "))
ADI_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJPU_ADI_Data.csv",na.string=c(NA,""," "))
#Data Cleaning: Getting correct columns to join all datasets
#We need some key variables which are in all 3 program data, we will remove the others
col_names <- c("PROGRAM","CITY","ZIP","COUNTY_CODE","INTERCONNECTION_DATE","SYSTEM_SIZE",
"CUSTOMER_TYPE","INTERCONNECTION_TYPE","THIRD_PARTY_OWNERSHIP")
SRP_Data <- SRP_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(SRP_Data) <- col_names
TI_Data <- TI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(TI_Data) <- col_names
ADI_Data <- ADI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(ADI_Data) <- col_names
#Join all the datasets to create one with all entries across all programs
#We will now perform some data cleaning on this dataset
Solar_Data0 <- rbind(SRP_Data,TI_Data,ADI_Data)
remove(SRP_Data)
remove(TI_Data)
remove(ADI_Data)
remove(col_names)
### STEP 2: CLEANING DATASET ###
#First, lets create a DataExplorer report to explore missing data
#Uncomment to run:
#create_report(Solar_Data0)
#From the report we see that our dataset is very complete
#We have 20 observations with missing town and zip codes, we will leave these in
#They still have county codes so we may roll them up or remove later
#Recode County_Codes and use county names instead
#Not sure where NJBPU got these codes, but they aren't handily available anywhere
#So, I manually went and searched town names in each county code and create this list
COUNTY_CODE <- c(1:21)
COUNTY <- c("Sussex","Warren","Morris","Hunterdon","Somerset","Passaic","Bergen",
"Hudson","Essex","Union","Middlesex","Mercer","Burlington","Camden",
"Gloucester","Salem","Monmouth","Ocean","Atlantic","Cumberland","Cape May")
County_Code_Conversion <- data.frame(COUNTY_CODE,COUNTY)
remove(COUNTY_CODE,COUNTY)
Solar_Data1 <- left_join(Solar_Data0,County_Code_Conversion,by=c("COUNTY_CODE"="COUNTY_CODE"))
Solar_Data1 <- Solar_Data1[c(1:4,10,5:9)]
#Reformat Zip Codes, since they're missing 0's: Not elegant but works
Solar_Data1$ZIP <- paste("0",Solar_Data1$ZIP,sep="")
Solar_Data1$ZIP[Solar_Data1$ZIP=="0NA"] <- NA
remove(County_Code_Conversion)
remove(Solar_Data0)
### STEP 3: AGGREGATE DATA ###
#Aggregate COUNTY, THIRD_PARTY_OWNERSHIP for only RESIDENTIAL
Solar_TPO_County <- Solar_Data1 %>%
filter(CUSTOMER_TYPE=="Residential") %>%
group_by(COUNTY, THIRD_PARTY_OWNERSHIP) %>%
summarize(COUNT = n()) %>%
mutate(FREQ = COUNT / sum(COUNT)) %>%
filter(THIRD_PARTY_OWNERSHIP == "Yes") %>%
select(COUNTY,TPO_FREQ = FREQ)
#Aggregate ZIP, THIRD_PARTY_OWNERSHIP for only RESIDENTIAL
Solar_TPO_Zip <- Solar_Data1 %>%
filter(CUSTOMER_TYPE=="Residential") %>%
group_by(ZIP, THIRD_PARTY_OWNERSHIP) %>%
summarize(COUNT = n()) %>%
mutate(FREQ = COUNT / sum(COUNT)) %>%
filter(THIRD_PARTY_OWNERSHIP == "Yes") %>%
select(ZIP,TPO_FREQ = FREQ)
#Aggregate by COUNTY for only RESIDENTIAL
Solar_Res_County <- Solar_Data1 %>%
filter(CUSTOMER_TYPE=="Residential") %>%
group_by(COUNTY) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
#Aggregate by Zip Code for only RESIDENTIAL
Solar_Res_Zip <- Solar_Data1 %>%
filter(CUSTOMER_TYPE=="Residential") %>%
group_by(ZIP) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
remove(Solar_Data1)
### STEP 1: IMPORT AND JOIN CENSUS DATA TO BPU TABLES ###
#Load necessary libraries
library(tidyverse)
library(tidycensus)
library(sf)
#Insert your own Census API Key here
#If you don't have one, you can quickly register for one at the following URL:
#https://api.census.gov/data/key_signup.html
#census_api_key("", install = TRUE)
#Make County Code Dictionary
county_dict <- c("1" = "Sussex","2"	= "Warren","3" = "Morris","4" = "Hunterdon","5" = "Somerset","6" = "Passaic","7" = "Bergen","8" = "Hudson","9" = "Essex","10" = "Union","11" = "Middlesex","12" = "Mercer","13" = "Burlington","14" = "Camden","15" = "Gloucester","16" = "Salem","17" = "Monmouth","18" = "Ocean","19" = "Atlantic","20" = "Cumberland","21" = "Cape May")
#Get county data from ACS
county_income <- get_acs(variables = "DP03_0062E", geography = "county", state = "NJ", survey = "acs5", year = 2019, geometry = TRUE)
county_perc_male <- get_acs(variables = "DP05_0002PE", geography = "county", state = "NJ", survey = "acs5", year = 2019)
county_perc_white <- get_acs(variables = "DP05_0037PE", geography = "county", state = "NJ", survey = "acs5", year = 2019)
county_total_house <- get_acs(variables = "DP04_0002E", geography = "county", state = "NJ", survey = "acs5", year = 2019)
#Add county code to county datasets
county_dict <- county_dict[order(unlist(county_dict), decreasing=FALSE)] # sort dict by county name
county_income <- county_income[order(county_income$NAME),]
county_income["COUNTY_CODE"] = as.integer(names(county_dict))
county_perc_male["COUNTY_CODE"] = as.integer(names(county_dict))
county_perc_white["COUNTY_CODE"] = as.integer(names(county_dict))
county_total_house["COUNTY_CODE"] = as.integer(names(county_dict))
Solar_Res_County["COUNTY_CODE"] = as.integer(names(county_dict))
#Get zip data from ACS
zip_income <- get_acs(variables = "DP03_0062E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_perc_male <- get_acs(variables = "DP05_0002PE", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_perc_white <- get_acs(variables = "DP05_0037PE", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_total_house <- get_acs(variables = "DP04_0002E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_owner_house <- get_acs(variables = "DP04_0046E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_renter_house <- get_acs(variables = "DP04_0047E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
#Combine the county demographics with solar data
Solar_Res_County$geometry <- county_income$geometry[match(Solar_Res_County$COUNTY_CODE, county_income$COUNTY_CODE)]
Solar_Res_County$Income <- county_income$estimate[match(Solar_Res_County$COUNTY_CODE,county_income$COUNTY_CODE)]
Solar_Res_County$Perc_White <- county_perc_white$estimate[match(Solar_Res_County$COUNTY_CODE,county_perc_white$COUNTY_CODE)]
Solar_Res_County$Perc_Male <- county_perc_male$estimate[match(Solar_Res_County$COUNTY_CODE,county_perc_male$COUNTY_CODE)]
Solar_Res_County$Total_Occ_House <- county_total_house$estimate[match(Solar_Res_County$COUNTY_CODE,county_total_house$COUNTY_CODE)]
Solar_Res_County$Adoption_Rate <- Solar_Res_County$COUNT/Solar_Res_County$Total_Occ_House
#Combine the zip demographics with solar data
Solar_Res_Zip$Income <- zip_income$estimate[match(Solar_Res_Zip$ZIP,zip_income$GEOID)]
Solar_Res_Zip$Perc_White <- zip_perc_white$estimate[match(Solar_Res_Zip$ZIP,zip_perc_white$GEOID)]
Solar_Res_Zip$Perc_Male <- zip_perc_male$estimate[match(Solar_Res_Zip$ZIP,zip_perc_male$GEOID)]
Solar_Res_Zip$Total_Occ_House <- zip_total_house$estimate[match(Solar_Res_Zip$ZIP,zip_total_house$GEOID)]
Solar_Res_Zip$Adoption_Rate <- Solar_Res_Zip$COUNT/Solar_Res_Zip$Total_Occ_House
Solar_Res_Zip$Total_Own_House <- zip_owner_house$estimate[match(Solar_Res_Zip$ZIP,zip_owner_house$GEOID)]
Solar_Res_Zip$Total_Rent_House <- zip_renter_house$estimate[match(Solar_Res_Zip$ZIP,zip_renter_house$GEOID)]
Solar_Res_Zip$Perc_House_Owned <- Solar_Res_Zip$Total_Own_House/Solar_Res_Zip$Total_Occ_House
Solar_Res_Zip$Perc_House_Rented <- Solar_Res_Zip$Total_Rent_House/Solar_Res_Zip$Total_Occ_House
#Clean up Solar_Res_Zip Dataset for Analysis
Solar_Res_Zip <- Solar_Res_Zip %>%
subset(select=-c(COUNT, Total_Occ_House, Total_Own_House, Total_Rent_House)) %>%
drop_na() %>%
filter(Income > 0)
#Combine zip housing data
zip_total_house$Owner_Occ_Houses <- zip_owner_house$estimate[match(zip_total_house$GEOID,zip_owner_house$GEOID)]
zip_total_house$Renter_Occ_Houses <- zip_renter_house$estimate[match(zip_total_house$GEOID,zip_renter_house$GEOID)]
zip_housing <- zip_total_house %>%
rename(Total_Occ_Houses = estimate, ZIP = GEOID) %>%
subset(select = -c(NAME, variable, moe))
#Remove census datasets from global environment
remove(zip_income, zip_perc_male, zip_perc_white, zip_total_house, zip_owner_house, zip_renter_house, county_dict, county_income, county_perc_male, county_perc_white, county_total_house)
### Set Working Directory to Export Tables To ###
setwd("~/GitHub/Data-Visualization-Final-Project/Data Files for Analysis")
#Residential Solar and Census Data Table for Zip Code Level Statistical Analysis
write.csv(Solar_Res_Zip,"Residential_Solar_ZIP.csv")
#Residential Solar TPO Data by County
write.csv(Solar_TPO_County,"Solar_TPO_County.csv")
#Residential Solar TPO Data by ZIP
write.csv(Solar_TPO_Zip,"Solar_TPO_Zip.csv")
#Saving as R object will preserve geometry, we will use these tables to map
#Residential Solar by County
save(Solar_Res_County, file = 'Solar_Res_County.Rda')
#Overall Solar by County
#We use capacities directly from report
Solar_All_County <- read_csv("County_Totals.csv") %>% filter(County != "Overall")
Solar_All_County$geometry <- Solar_Res_County$geometry[
match(Solar_All_County$County,Solar_Res_County$COUNTY)]
save(Solar_All_County, file = 'Solar_All_County.Rda')
remove(Solar_All_County,Solar_Res_County,Solar_Res_Zip,zip_housing, Solar_TPO_County)
remove(Solar_All_County,Solar_Res_County,Solar_Res_Zip,zip_housing, Solar_TPO_County, Solar_TPO_Zip)
library(flexdashboard)
library(tidyverse)
library(shiny)
library(plotly)
library(formattable)
library(DT)
library(lubridate)
library(xts)
library(dygraphs)
library(nivocal)
library(sf)
library(RColorBrewer)
library(leaflet)
library(htmltools)
library(janitor)
# Load in all the necessary data tables:
setwd("~/GitHub/Data-Visualization-Final-Project/Data Files for Analysis")
## Section 1: Overall Landscape ##
load("Solar_All_County.Rda")
county_level_rates <- read_csv('County_Totals.csv')
county_level_sectors <- read_csv('County_Sectors.csv')
Solar_All_County <- st_as_sf(Solar_All_County) %>% st_transform(4326)
## Section 2: Overall Trends ##
trend <- read_csv('Trend.csv')
trend_trans <- read_csv('Trend_Transposed.csv')
trend_yoy <- read_csv('Trend_Percents.csv')
## Section 3: Residential Landscape ##
load("Solar_Res_County.Rda")
Solar_Res_County <- st_as_sf(Solar_Res_County) %>% st_transform(4326) %>%
mutate(CAPACITY_MW=CAPACITY/1000)
Overall_Adoption_Rate <- Solar_Res_County %>% st_drop_geometry() %>%
select(COUNTY,COUNT,Total_Occ_House) %>%
adorn_totals("row") %>% filter(COUNTY=="Total") %>%
mutate(Adoption_Rate=COUNT/Total_Occ_House)
## Section 4: Residential Analysis ###
zip_level_res <- read_csv("Residential_Solar_Zip.csv")
View(county_level_rates)
county_level_sectors0 <- county_level_sectors %>% filter(County!="Overall")
colors <- county_level_sectors0 %>%
select(County) %>%
mutate(res_color = "#6367CE") %>%
mutate(nonres_color = "#F1A73E") %>%
mutate(gs_color = "#4DBA37")
View(colors)
colors2 <- colors %>% select(res_color,nonres_color,gs_color) %>% top_n(1)
View(colors2)
colors2 <- colors %>% select(res_color,nonres_color,gs_color) %>% slice_head(1)
colors2 <- colors %>% select(res_color,nonres_color,gs_color) %>% slice_head(n=1)
View(colors2)
View(county_level_sectors)
