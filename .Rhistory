load("C:/Users/psimr/Documents/Rutgers Fall 2021/Theory and Practice of Public Informatics/Rat Sightings/.RData")
BOD
install.packages('DataExplorer')
install.packages('esquisse')
esquisse:::esquisser()
library(readxl)
Solar0 <- read_excel("Rutgers Spring 2022/Data Viz/Assignment 8/NJBPU Solar Data - TI Program.xlsx")
View(Solar0)
remove(Solar0)
install.packages("viridis")
knitr::opts_chunk$set(echo = TRUE)
library(DataExplorer)
solar0 <- read_excel("Rutgers Spring 2022/Data Viz/Assignment 8/NJBPU Solar Data - TI Program.xlsx")
### STEP 1: IMPORTING DATA AND CREATING A BASE DATASET ###
#Load necessary libraries
library(tidyverse)
library(DataExplorer)
#Set Working Directory to Github folder
#Change to appropriate location if running on your own
setwd("~/GitHub/Data-Visualization-Final-Project")
#Import the datasets, one for each program
#Sourced from December'21 Monthly NJBPU Solar Registration Database
#At this URL: https://njcleanenergy.com/renewable-energy/project-activity-reports/solar-activity-report-archive
SRP_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJBPU_SRP_Data.csv",na.string=c(NA,""," "))
TI_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJBPU_TI_Data.csv",na.string=c(NA,""," "))
ADI_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJPU_ADI_Data.csv",na.string=c(NA,""," "))
#Data Cleaning: Getting correct columns to join all datasets
#We need some key variables which are in all 3 program data, we will remove the others
col_names <- c("PROGRAM","CITY","ZIP","COUNTY_CODE","INTERCONNECTION_DATE","SYSTEM_SIZE",
"CUSTOMER_TYPE","INTERCONNECTION_TYPE","THIRD_PARTY_OWNERSHIP")
SRP_Data <- SRP_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(SRP_Data) <- col_names
TI_Data <- TI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(TI_Data) <- col_names
ADI_Data <- ADI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(ADI_Data) <- col_names
#Join all the datasets to create one with all entries across all programs
#We will now perform some data cleaning on this dataset
Solar_Data0 <- rbind(SRP_Data,TI_Data,ADI_Data)
remove(SRP_Data)
remove(TI_Data)
remove(ADI_Data)
remove(col_names)
### STEP 2: CLEANING DATASET ###
#First, lets create a DataExplorer report to explore missing data, uncomment to run
#create_report(Solar_Data0)
#From the report we see that our dataset is very complete
#We have 20 observations with missing town and zip codes, we will leave these in
#They still have county codes so we may roll them up or remove later
#We will now try and match up duplicate city names
solar_mun <- unique(Solar_Data0$CITY)
#5,223 unique city names, when there are only 564 municipalities in NJ
#Maybe that's too much to clean up, and we should just use zip codes
#Reformat Zip Codes, since they're missing 0's: Not elegant but works
Solar_Data0$ZIP <- paste("0",Solar_Data0$ZIP,sep="")
Solar_Data0$ZIP[Solar_Data0$ZIP=="0NA"] <- NA
#Aggregate by Zip Code and County
View(Solar_Data0)
#Recode County_Codes and use county names instead
#Not sure where NJBPU got these codes, but they aren't handily available anywhere
#So, I manually went and searched town names in each county code and create this list
COUNTY_CODE <- c(1:21)
COUNTY <- c("Sussex","Warren","Morris","Hunterdon","Somerset","Passaic","Bergen",
"Hudson","Essex","Union","Middlesex","Mercer","Burlington","Camden",
"Gloucester","Salem","Monmouth","Ocean","Atlantic","Cumberland","Cape May")
remove(solar_mun)
#Recode County_Codes and use county names instead
#Not sure where NJBPU got these codes, but they aren't handily available anywhere
#So, I manually went and searched town names in each county code and create this list
COUNTY_CODE <- c(1:21)
COUNTY <- c("Sussex","Warren","Morris","Hunterdon","Somerset","Passaic","Bergen",
"Hudson","Essex","Union","Middlesex","Mercer","Burlington","Camden",
"Gloucester","Salem","Monmouth","Ocean","Atlantic","Cumberland","Cape May")
County_Code_Conversion <- data.frame(COUNTY_CODE,COUNTY)
remove(COUNTY_CODE,COUNTY)
Solar_Data0 <- merge(Solar_Data0,County_Code_Conversion,by=COUNTY_CODE)
Solar_Data1 <- left_join(Solar_Data0,County_Code_Conversion,by=COUNTY_CODE)
Solar_Data1 <- left_join(Solar_Data0,County_Code_Conversion,by="COUNTY_CODE"="COUNTY_CODE")
Solar_Data1 <- left_join(Solar_Data0,County_Code_Conversion,by=c("COUNTY_CODE"="COUNTY_CODE")
Solar_Data1 <- left_join(Solar_Data0,County_Code_Conversion,by=c("COUNTY_CODE"="COUNTY_CODE"))
View(Solar_Data1)
Solar_Data1 <- Solar_Data1[c(1:4,10,5:9)]
#Reformat Zip Codes, since they're missing 0's: Not elegant but works
Solar_Data1$ZIP <- paste("0",Solar_Data0$ZIP,sep="")
Solar_Data1$ZIP[Solar_Data0$ZIP=="0NA"] <- NA
### STEP 1: IMPORTING DATA AND CREATING A BASE DATASET ###
#Load necessary libraries
library(tidyverse)
library(DataExplorer)
#Set Working Directory to Github folder
#Change to appropriate location if running on your own
setwd("~/GitHub/Data-Visualization-Final-Project")
#Import the datasets, one for each program
#Sourced from December'21 Monthly NJBPU Solar Registration Database
#At this URL: https://njcleanenergy.com/renewable-energy/project-activity-reports/solar-activity-report-archive
SRP_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJBPU_SRP_Data.csv",na.string=c(NA,""," "))
TI_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJBPU_TI_Data.csv",na.string=c(NA,""," "))
ADI_Data <- read.csv("~/GitHub/Data-Visualization-Final-Project/Original Data Files/NJPU_ADI_Data.csv",na.string=c(NA,""," "))
#Data Cleaning: Getting correct columns to join all datasets
#We need some key variables which are in all 3 program data, we will remove the others
col_names <- c("PROGRAM","CITY","ZIP","COUNTY_CODE","INTERCONNECTION_DATE","SYSTEM_SIZE",
"CUSTOMER_TYPE","INTERCONNECTION_TYPE","THIRD_PARTY_OWNERSHIP")
SRP_Data <- SRP_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(SRP_Data) <- col_names
TI_Data <- TI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(TI_Data) <- col_names
ADI_Data <- ADI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(ADI_Data) <- col_names
#Join all the datasets to create one with all entries across all programs
#We will now perform some data cleaning on this dataset
Solar_Data0 <- rbind(SRP_Data,TI_Data,ADI_Data)
remove(SRP_Data)
remove(TI_Data)
remove(ADI_Data)
remove(col_names)
### STEP 2: CLEANING DATASET ###
#First, lets create a DataExplorer report to explore missing data
#Uncomment to run:
#create_report(Solar_Data0)
#From the report we see that our dataset is very complete
#We have 20 observations with missing town and zip codes, we will leave these in
#They still have county codes so we may roll them up or remove later
#Recode County_Codes and use county names instead
#Not sure where NJBPU got these codes, but they aren't handily available anywhere
#So, I manually went and searched town names in each county code and create this list
COUNTY_CODE <- c(1:21)
COUNTY <- c("Sussex","Warren","Morris","Hunterdon","Somerset","Passaic","Bergen",
"Hudson","Essex","Union","Middlesex","Mercer","Burlington","Camden",
"Gloucester","Salem","Monmouth","Ocean","Atlantic","Cumberland","Cape May")
County_Code_Conversion <- data.frame(COUNTY_CODE,COUNTY)
remove(COUNTY_CODE,COUNTY)
Solar_Data1 <- left_join(Solar_Data0,County_Code_Conversion,by=c("COUNTY_CODE"="COUNTY_CODE"))
Solar_Data1 <- Solar_Data1[c(1:4,10,5:9)]
#Reformat Zip Codes, since they're missing 0's: Not elegant but works
Solar_Data1$ZIP <- paste("0",Solar_Data1$ZIP,sep="")
Solar_Data1$ZIP[Solar_Data1$ZIP=="0NA"] <- NA
remove(Solar_Data0)
remove(County_Code_Conversion)
View(Solar_Data1)
#Aggregate by Zip Code for all CUSTOMER_TYPE
Solar_All_Zip <- Solar_Data1 %>%
group_by(ZIP,CUSTOMER_TYPE,INTERCONNECTION_TYPE,THIRD_PARTY_OWNERSHIP) %>%
summarize(CAPACITY = SUM(SYSTEM_SIZE,na.rm=TRUE),
COUNT=n())
#Aggregate by Zip Code for all CUSTOMER_TYPE
Solar_All_Zip <- Solar_Data1 %>%
group_by(ZIP,CUSTOMER_TYPE,INTERCONNECTION_TYPE,THIRD_PARTY_OWNERSHIP) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE),
COUNT=n())
View(Solar_All_Zip)
remove(Solar_All_Zip)
#Aggregate by Zip Code for all CUSTOMER_TYPE
Solar_All_Zip <- Solar_Data1 %>% group_by(ZIP) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE),
COUNT=n())
#Aggregate by COUNTY for only RESIDENTIAL
Solar_All_County <- Solar_Data1 %>% filter(CUSTOMER_TYPE=="Residential")
#Aggregate by COUNTY for only RESIDENTIAL
Solar_Res_County <- Solar_Data1 %>% filter(CUSTOMER_TYPE=="Residential")
#Aggregate by COUNTY for all CUSTOMER_TYPE
Solar_All_County <- Solar_Data1 %>% group_by(COUNTY) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
remove(Solar_All_Zip)
View(Solar_Res_County)
#Aggregate by COUNTY for only RESIDENTIAL
Solar_Res_County <- Solar_Data1 %>% filter(CUSTOMER_TYPE=="Residential") %>%
group_by(COUNTY) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
View(Solar_Res_County)
View(Solar_All_County)
