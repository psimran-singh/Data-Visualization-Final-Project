<<<<<<< Updated upstream
=======
group_by(COUNTY) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
# #Aggregate by Zip Code for all CUSTOMER_TYPE
# #We actually won't need this table
# Solar_All_Zip <- Solar_Data1 %>%
#   group_by(ZIP,CUSTOMER_TYPE) %>%
#   summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
#Aggregate by Zip Code for only RESIDENTIAL
Solar_Res_Zip <- Solar_Data1 %>%
filter(CUSTOMER_TYPE=="Residential") %>%
group_by(ZIP) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
# libraries
library(tidyverse)
library(tidycensus)
# set up census
census_api_key("", install = TRUE)
# county code dictionary
county_dict <- c("1" = "Sussex","2"	= "Warren","3" = "Morris","4" = "Hunterdon","5" = "Somerset","6" = "Passaic","7" = "Bergen","8" = "Hudson","9" = "Essex","10" = "Union","11" = "Middlesex","12" = "Mercer","13" = "Burlington","14" = "Camden","15" = "Gloucester","16" = "Salem","17" = "Monmouth","18" = "Ocean","19" = "Atlantic","20" = "Cumberland","21" = "Cape May")
# get county data from ACS
county_income <- get_acs(variables = "DP03_0051E", geography = "county", state = "NJ", survey = "acs5", year = 2019)
county_perc_male <- get_acs(variables = "DP05_0002PE", geography = "county", state = "NJ", survey = "acs5", year = 2019)
county_perc_white <- get_acs(variables = "DP05_0037PE", geography = "county", state = "NJ", survey = "acs5", year = 2019)
# add county code to county datasets
county_dict <- county_dict[order(unlist(county_dict), decreasing=FALSE)] # sort dict by county name
county_income["COUNTY_CODE"] = as.integer(names(county_dict))
county_perc_male["COUNTY_CODE"] = as.integer(names(county_dict))
county_perc_white["COUNTY_CODE"] = as.integer(names(county_dict))
Solar_Res_County["COUNTY_CODE"] = as.integer(names(county_dict))
# get zip data from ACS
zip_income <- get_acs(variables = "DP03_0051E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_perc_male <- get_acs(variables = "DP05_0002PE", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_perc_white <- get_acs(variables = "DP05_0037PE", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
# combine the county demographics with solar data
Solar_Res_County$County_Income <- county_income$estimate[match(Solar_Res_County$COUNTY_CODE,county_income$COUNTY_CODE)]
Solar_Res_County$County_Perc_White <- county_perc_white$estimate[match(Solar_Res_County$COUNTY_CODE,county_perc_white$COUNTY_CODE)]
Solar_Res_County$County_Perc_Male <- county_perc_male$estimate[match(Solar_Res_County$COUNTY_CODE,county_perc_male$COUNTY_CODE)]
#combine the zip demographics with solar data
Solar_Res_Zip$Zip_Income <- zip_income$estimate[match(Solar_Res_Zip$ZIP,zip_income$GEOID)]
Solar_Res_Zip$Zip_Perc_White <- zip_perc_white$estimate[match(Solar_Res_Zip$ZIP,zip_perc_white$GEOID)]
Solar_Res_Zip$Zip_Perc_Male <- zip_perc_male$estimate[match(Solar_Res_Zip$ZIP,zip_perc_male$GEOID)]
View(zip_income)
View(zip_income)
setwd("~/Data Viz in R/Data-Visualization-Final-Project/Data Files for Analysis")
setwd("~/Data Viz in R/Data-Visualization-Final-Project/Data Files for Analysis")
write.csv(Solar_Res_Zip,"Solar + Census Data - ZIP.csv", row.names = TRUE)
write.csv(Solar_Res_County,"Solar + Census Data - COUNTY.csv", row.names = TRUE)
zip_est_house <- get_acs(variables = "DP04_0001E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
View(zip_est_house)
View(MODIV_ZIP)
View(MODIV_ZIP)
View(MODIV_County)
View(MODIV_County)
View(MODIV_Data_Flat)
View(MODIV_Data_Flat)
zip_house <- get_acs(variables = c("DP04_0002E", "DP04_0046E", "DP04_0047E"), geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
View(zip_house)
View(zip_house)
zip_total_house <- get_acs(variables = "DP04_0002E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_owner_house <- get_acs(variables = "DP04_0046E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_renter_house <- get_acs(variables = "DP04_0047E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
remove(zip_house)
remove(zip_est_house)
View(zip_owner_house)
View(zip_owner_house)
View(zip_total_house)
View(zip_total_house)
zip_total_house$Owner_Occ_Houses <- zip_owner_house$estimate[match(zip_total_house$GEOID,zip_owner_house$GEOID)]
zip_total_house$Renter_Occ_Houses <- zip_renter_house$estimate[match(zip_total_house$GEOID,zip_renter_house$GEOID)]
View(zip_total_house)
View(zip_total_house)
View(zip_income)
View(zip_income)
View(Solar_Res_Zip)
zip_housing <- zip_total_house %>%
rename(estimate = Total_Occ_Houses) %>%
rename(GEOID = ZIP) %>%
subset(zip_total_house, select = -c(NAME, variable, moe))
zip_housing <- zip_total_house %>%
rename(Total_Occ_Houses = estimate, ZIP = GEOID) %>%
subset(zip_total_house, select = -c(NAME, variable, moe))
zip_housing <- zip_total_house %>%
rename(Total_Occ_Houses = estimate, ZIP = GEOID) %>%
subset(select = -c(NAME, variable, moe))
View(zip_housing)
View(zip_housing)
setwd("~/Data Viz in R/Data-Visualization-Final-Project/Data Files for Analysis")
write.csv(zip_housing, "Census Housing Data by ZIP.csv")
# remove census datasets from global environment
remove(zip_income, zip_perc_male, zip_total_house, zip_owner_house, zip_renter_house, county_dict, county_income, county_perc_male, county_perc_white)
remove(zip_perc_white)
### STEP 1: IMPORTING DATA AND CREATING A BASE DATASET ###
#Load necessary libraries
library(tidyverse)
library(DataExplorer)
#Set Working Directory to Github folder
#Change to appropriate location if running on your own
#setwd("~/GitHub/Data-Visualization-Final-Project")
#Import the datasets, one for each program
#Sourced from December'21 Monthly NJBPU Solar Registration Database
#At this URL: https://njcleanenergy.com/renewable-energy/project-activity-reports/solar-activity-report-archive
SRP_Data <- read.csv("Original Data Files/NJBPU_SRP_Data.csv",na.string=c(NA,""," "))
TI_Data <- read.csv("Original Data Files/NJBPU_TI_Data.csv",na.string=c(NA,""," "))
ADI_Data <- read.csv("Original Data Files/NJPU_ADI_Data.csv",na.string=c(NA,""," "))
#Data Cleaning: Getting correct columns to join all datasets
#We need some key variables which are in all 3 program data, we will remove the others
col_names <- c("PROGRAM","CITY","ZIP","COUNTY_CODE","INTERCONNECTION_DATE","SYSTEM_SIZE",
"CUSTOMER_TYPE","INTERCONNECTION_TYPE","THIRD_PARTY_OWNERSHIP")
SRP_Data <- SRP_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(SRP_Data) <- col_names
TI_Data <- TI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(TI_Data) <- col_names
ADI_Data <- ADI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(ADI_Data) <- col_names
#Join all the datasets to create one with all entries across all programs
#We will now perform some data cleaning on this dataset
Solar_Data0 <- rbind(SRP_Data,TI_Data,ADI_Data)
remove(SRP_Data)
remove(TI_Data)
remove(ADI_Data)
remove(col_names)
### STEP 2: CLEANING DATASET ###
#First, lets create a DataExplorer report to explore missing data
#Uncomment to run:
#create_report(Solar_Data0)
#From the report we see that our dataset is very complete
#We have 20 observations with missing town and zip codes, we will leave these in
#They still have county codes so we may roll them up or remove later
#Recode County_Codes and use county names instead
#Not sure where NJBPU got these codes, but they aren't handily available anywhere
#So, I manually went and searched town names in each county code and create this list
COUNTY_CODE <- c(1:21)
COUNTY <- c("Sussex","Warren","Morris","Hunterdon","Somerset","Passaic","Bergen",
"Hudson","Essex","Union","Middlesex","Mercer","Burlington","Camden",
"Gloucester","Salem","Monmouth","Ocean","Atlantic","Cumberland","Cape May")
County_Code_Conversion <- data.frame(COUNTY_CODE,COUNTY)
remove(COUNTY_CODE,COUNTY)
Solar_Data1 <- left_join(Solar_Data0,County_Code_Conversion,by=c("COUNTY_CODE"="COUNTY_CODE"))
Solar_Data1 <- Solar_Data1[c(1:4,10,5:9)]
#Reformat Zip Codes, since they're missing 0's: Not elegant but works
Solar_Data1$ZIP <- paste("0",Solar_Data1$ZIP,sep="")
Solar_Data1$ZIP[Solar_Data1$ZIP=="0NA"] <- NA
remove(County_Code_Conversion)
remove(Solar_Data0)
### STEP 3: AGGREGATE DATA AND GET FINAL DATASETS ###
#Aggregate by COUNTY for all CUSTOMER_TYPE
Solar_All_County <- Solar_Data1 %>%
group_by(COUNTY, CUSTOMER_TYPE, THIRD_PARTY_OWNERSHIP) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
#Aggregate by COUNTY for only RESIDENTIAL
Solar_Res_County <- Solar_Data1 %>%
filter(CUSTOMER_TYPE=="Residential") %>%
group_by(COUNTY) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
# #Aggregate by Zip Code for all CUSTOMER_TYPE
# #We actually won't need this table
# Solar_All_Zip <- Solar_Data1 %>%
#   group_by(ZIP,CUSTOMER_TYPE) %>%
#   summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
#Aggregate by Zip Code for only RESIDENTIAL
Solar_Res_Zip <- Solar_Data1 %>%
filter(CUSTOMER_TYPE=="Residential") %>%
group_by(ZIP) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
# libraries
library(tidyverse)
library(tidycensus)
# set up census
census_api_key("", install = TRUE)
# county code dictionary
county_dict <- c("1" = "Sussex","2"	= "Warren","3" = "Morris","4" = "Hunterdon","5" = "Somerset","6" = "Passaic","7" = "Bergen","8" = "Hudson","9" = "Essex","10" = "Union","11" = "Middlesex","12" = "Mercer","13" = "Burlington","14" = "Camden","15" = "Gloucester","16" = "Salem","17" = "Monmouth","18" = "Ocean","19" = "Atlantic","20" = "Cumberland","21" = "Cape May")
# get county data from ACS
county_income <- get_acs(variables = "DP03_0051E", geography = "county", state = "NJ", survey = "acs5", year = 2019)
county_perc_male <- get_acs(variables = "DP05_0002PE", geography = "county", state = "NJ", survey = "acs5", year = 2019)
county_perc_white <- get_acs(variables = "DP05_0037PE", geography = "county", state = "NJ", survey = "acs5", year = 2019)
county_total_house <- get_acs(variables = "DP04_0002E", geography = "county", state = "NJ", survey = "acs5", year = 2019)
# add county code to county datasets
county_dict <- county_dict[order(unlist(county_dict), decreasing=FALSE)] # sort dict by county name
county_income["COUNTY_CODE"] = as.integer(names(county_dict))
>>>>>>> Stashed changes
county_perc_male["COUNTY_CODE"] = as.integer(names(county_dict))
county_perc_white["COUNTY_CODE"] = as.integer(names(county_dict))
county_total_house["COUNTY_CODE"] = as.integer(names(county_dict))
Solar_Res_County["COUNTY_CODE"] = as.integer(names(county_dict))
<<<<<<< Updated upstream
zip_income <- get_acs(variables = "DP03_0051E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019, geometry = TRUE)
zip_perc_male <- get_acs(variables = "DP05_0002PE", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019, geometry = TRUE)
zip_perc_white <- get_acs(variables = "DP05_0037PE", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019, geometry = TRUE)
zip_total_house <- get_acs(variables = "DP04_0002E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019, geometry = TRUE)
zip_owner_house <- get_acs(variables = "DP04_0046E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019, geometry = TRUE)
zip_renter_house <- get_acs(variables = "DP04_0047E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019, geometry = TRUE)
Solar_Res_County$geometry <- county_income$geometry[match(Solar_Res_County$COUNTY_CODE,county_income$COUNTY_CODE)]
=======
# get zip data from ACS
zip_income <- get_acs(variables = "DP03_0051E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_perc_male <- get_acs(variables = "DP05_0002PE", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_perc_white <- get_acs(variables = "DP05_0037PE", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_total_house <- get_acs(variables = "DP04_0002E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_owner_house <- get_acs(variables = "DP04_0046E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_renter_house <- get_acs(variables = "DP04_0047E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
# combine the county demographics with solar data
Solar_Res_County$Income <- county_income$estimate[match(Solar_Res_County$COUNTY_CODE,county_income$COUNTY_CODE)]
Solar_Res_County$Perc_White <- county_perc_white$estimate[match(Solar_Res_County$COUNTY_CODE,county_perc_white$COUNTY_CODE)]
Solar_Res_County$Perc_Male <- county_perc_male$estimate[match(Solar_Res_County$COUNTY_CODE,county_perc_male$COUNTY_CODE)]
Solar_Res_County$Total_Occ_House <- county_total_house$estimate[match(Solar_Res_County$COUNTY_CODE,county_total_house$COUNTY_CODE)]
Solar_Res_County$Adoption_Rate <- Solar_Res_County$COUNT/Solar_Res_County$Total_Occ_House
# combine the zip demographics with solar data
Solar_Res_Zip$Income <- zip_income$estimate[match(Solar_Res_Zip$ZIP,zip_income$GEOID)]
Solar_Res_Zip$Perc_White <- zip_perc_white$estimate[match(Solar_Res_Zip$ZIP,zip_perc_white$GEOID)]
Solar_Res_Zip$Perc_Male <- zip_perc_male$estimate[match(Solar_Res_Zip$ZIP,zip_perc_male$GEOID)]
Solar_Res_Zip$Total_Occ_House <- zip_total_house$estimate[match(Solar_Res_Zip$ZIP,zip_total_house$GEOID)]
Solar_Res_Zip$Adoption_Rate <- Solar_Res_Zip$COUNT/Solar_Res_Zip$Total_Occ_House
View(Solar_Res_Zip)
View(Solar_Res_Zip)
View(Solar_Res_Zip)
View(Solar_Res_Zip)
View(zip_income)
View(zip_income)
>>>>>>> Stashed changes
Solar_Res_County$Income <- county_income$estimate[match(Solar_Res_County$COUNTY_CODE,county_income$COUNTY_CODE)]
Solar_Res_County$Perc_White <- county_perc_white$estimate[match(Solar_Res_County$COUNTY_CODE,county_perc_white$COUNTY_CODE)]
Solar_Res_County$Perc_Male <- county_perc_male$estimate[match(Solar_Res_County$COUNTY_CODE,county_perc_male$COUNTY_CODE)]
Solar_Res_County$Total_Occ_House <- county_total_house$estimate[match(Solar_Res_County$COUNTY_CODE,county_total_house$COUNTY_CODE)]
Solar_Res_County$Adoption_Rate <- Solar_Res_County$COUNT/Solar_Res_County$Total_Occ_House
<<<<<<< Updated upstream
remove(zip_income, zip_perc_male, zip_perc_white, zip_total_house, zip_owner_house, zip_renter_house, county_dict, county_income, county_perc_male, county_perc_white, county_total_house)
View(Solar_Res_County)
setwd("~/Data Viz in R/Data-Visualization-Final-Project/Data Files for Analysis")
write.csv(Solar_Res_County,"Solar + Census Data - COUNTY.csv", row.names = TRUE)
setwd("~/Data Viz in R/Data-Visualization-Final-Project/Data Files for Analysis")
data_county <- read_csv('Solar + Census Data - COUNTY.csv') %>%
st_transform(3424)
data_county <- read_csv('Solar + Census Data - COUNTY.csv')
View(data_county)
data_county <- read_csv('Solar + Census Data - COUNTY.csv')
View(data_county)
library(readr)
Solar_Census_Data_COUNTY <- read_csv("Solar + Census Data - COUNTY.csv")
View(Solar_Census_Data_COUNTY)
View(Solar_Res_County)
setwd("~/Data Viz in R/Data-Visualization-Final-Project/Data Files for Analysis")
save('Solar_Res_County', 'Solar_Res + County_Census.RData')
# libraries
library(tidyverse)
library(tidycensus)
# set up census
census_api_key("", install = TRUE)
# county code dictionary
county_dict <- c("1" = "Sussex","2"	= "Warren","3" = "Morris","4" = "Hunterdon","5" = "Somerset","6" = "Passaic","7" = "Bergen","8" = "Hudson","9" = "Essex","10" = "Union","11" = "Middlesex","12" = "Mercer","13" = "Burlington","14" = "Camden","15" = "Gloucester","16" = "Salem","17" = "Monmouth","18" = "Ocean","19" = "Atlantic","20" = "Cumberland","21" = "Cape May")
# get county data from ACS
county_income <- get_acs(variables = "DP03_0051E", geography = "county", state = "NJ", survey = "acs5", year = 2019, geometry = TRUE)
county_perc_male <- get_acs(variables = "DP05_0002PE", geography = "county", state = "NJ", survey = "acs5", year = 2019, geometry = TRUE)
county_perc_white <- get_acs(variables = "DP05_0037PE", geography = "county", state = "NJ", survey = "acs5", year = 2019, geometry = TRUE)
county_total_house <- get_acs(variables = "DP04_0002E", geography = "county", state = "NJ", survey = "acs5", year = 2019, geometry = TRUE)
=======
View(Solar_Res_County)
Solar_Res_Zip$Income <- zip_income$estimate[match(Solar_Res_Zip$ZIP,zip_income$GEOID)]
Solar_Res_Zip$Perc_White <- zip_perc_white$estimate[match(Solar_Res_Zip$ZIP,zip_perc_white$GEOID)]
Solar_Res_Zip$Perc_Male <- zip_perc_male$estimate[match(Solar_Res_Zip$ZIP,zip_perc_male$GEOID)]
Solar_Res_Zip$Total_Occ_House <- zip_total_house$estimate[match(Solar_Res_Zip$ZIP,zip_total_house$GEOID)]
Solar_Res_Zip$Adoption_Rate <- Solar_Res_Zip$COUNT/Solar_Res_Zip$Total_Occ_House
View(Solar_Rates_Zip)
View(Solar_Res_Zip)
Solar_Res_Zip$Income <- zip_income$estimate[match(Solar_Res_Zip$ZIP,zip_income$GEOID)]
View(Solar_Res_Zip)
View(Solar_Rates_County)
Solar_Res_Zip$Income <- zip_income$estimate[match(Solar_Res_Zip$ZIP[2:],zip_income$GEOID)]
Solar_Res_Zip$Income <- zip_income$estimate[match(Solar_Res_Zip$ZIP[2,:],zip_income$GEOID)]
Solar_Res_Zip$Income <- zip_income$estimate[match(Solar_Res_Zip$ZIP[2,6],zip_income$GEOID)]
SRP_Data <- read.csv("Original Data Files/NJBPU_SRP_Data.csv",na.string=c(NA,""," "))
TI_Data <- read.csv("Original Data Files/NJBPU_TI_Data.csv",na.string=c(NA,""," "))
ADI_Data <- read.csv("Original Data Files/NJPU_ADI_Data.csv",na.string=c(NA,""," "))
setwd("~/Data Viz in R/Data-Visualization-Final-Project")
SRP_Data <- read.csv("Original Data Files/NJBPU_SRP_Data.csv",na.string=c(NA,""," "))
TI_Data <- read.csv("Original Data Files/NJBPU_TI_Data.csv",na.string=c(NA,""," "))
ADI_Data <- read.csv("Original Data Files/NJPU_ADI_Data.csv",na.string=c(NA,""," "))
View(TI_Data)
#Data Cleaning: Getting correct columns to join all datasets
#We need some key variables which are in all 3 program data, we will remove the others
col_names <- c("PROGRAM","CITY","ZIP","COUNTY_CODE","INTERCONNECTION_DATE","SYSTEM_SIZE",
"CUSTOMER_TYPE","INTERCONNECTION_TYPE","THIRD_PARTY_OWNERSHIP")
SRP_Data <- SRP_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(SRP_Data) <- col_names
TI_Data <- TI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(TI_Data) <- col_names
ADI_Data <- ADI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(ADI_Data) <- col_names
#Join all the datasets to create one with all entries across all programs
#We will now perform some data cleaning on this dataset
Solar_Data0 <- rbind(SRP_Data,TI_Data,ADI_Data)
remove(SRP_Data)
remove(TI_Data)
remove(ADI_Data)
remove(col_names)
### STEP 2: CLEANING DATASET ###
#First, lets create a DataExplorer report to explore missing data
#Uncomment to run:
#create_report(Solar_Data0)
#From the report we see that our dataset is very complete
#We have 20 observations with missing town and zip codes, we will leave these in
#They still have county codes so we may roll them up or remove later
#Recode County_Codes and use county names instead
#Not sure where NJBPU got these codes, but they aren't handily available anywhere
#So, I manually went and searched town names in each county code and create this list
COUNTY_CODE <- c(1:21)
COUNTY <- c("Sussex","Warren","Morris","Hunterdon","Somerset","Passaic","Bergen",
"Hudson","Essex","Union","Middlesex","Mercer","Burlington","Camden",
"Gloucester","Salem","Monmouth","Ocean","Atlantic","Cumberland","Cape May")
County_Code_Conversion <- data.frame(COUNTY_CODE,COUNTY)
remove(COUNTY_CODE,COUNTY)
Solar_Data1 <- left_join(Solar_Data0,County_Code_Conversion,by=c("COUNTY_CODE"="COUNTY_CODE"))
Solar_Data1 <- Solar_Data1[c(1:4,10,5:9)]
#Reformat Zip Codes, since they're missing 0's: Not elegant but works
Solar_Data1$ZIP <- paste("0",Solar_Data1$ZIP,sep="")
View(Solar_Data1)
View(Solar_Data1)
Solar_Data1$ZIP[Solar_Data1$ZIP=="0NA"] <- NA
remove(County_Code_Conversion)
remove(Solar_Data0)
### STEP 3: AGGREGATE DATA AND GET FINAL DATASETS ###
#Aggregate by COUNTY for all CUSTOMER_TYPE
Solar_All_County <- Solar_Data1 %>%
group_by(COUNTY, CUSTOMER_TYPE, THIRD_PARTY_OWNERSHIP) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
#Aggregate by COUNTY for only RESIDENTIAL
Solar_Res_County <- Solar_Data1 %>%
filter(CUSTOMER_TYPE=="Residential") %>%
group_by(COUNTY) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
# #Aggregate by Zip Code for all CUSTOMER_TYPE
# #We actually won't need this table
# Solar_All_Zip <- Solar_Data1 %>%
#   group_by(ZIP,CUSTOMER_TYPE) %>%
#   summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
#Aggregate by Zip Code for only RESIDENTIAL
Solar_Res_Zip <- Solar_Data1 %>%
filter(CUSTOMER_TYPE=="Residential") %>%
group_by(ZIP) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
View(Solar_Res_County)
View(Solar_Res_Zip)
Solar_Res_Zip$Income <- zip_income$estimate[match(Solar_Res_Zip$ZIP[2,6],zip_income$GEOID)]
Solar_Res_Zip$Perc_White <- zip_perc_white$estimate[match(Solar_Res_Zip$ZIP,zip_perc_white$GEOID)]
Solar_Res_Zip$Perc_Male <- zip_perc_male$estimate[match(Solar_Res_Zip$ZIP,zip_perc_male$GEOID)]
Solar_Res_Zip$Total_Occ_House <- zip_total_house$estimate[match(Solar_Res_Zip$ZIP,zip_total_house$GEOID)]
Solar_Res_Zip$Adoption_Rate <- Solar_Res_Zip$COUNT/Solar_Res_Zip$Total_Occ_House
Solar_Res_Zip$Income <- zip_income$estimate[match(Solar_Res_Zip$ZIP,zip_income$GEOID)]
Solar_Res_Zip$Perc_White <- zip_perc_white$estimate[match(Solar_Res_Zip$ZIP,zip_perc_white$GEOID)]
Solar_Res_Zip$Perc_Male <- zip_perc_male$estimate[match(Solar_Res_Zip$ZIP,zip_perc_male$GEOID)]
Solar_Res_Zip$Total_Occ_House <- zip_total_house$estimate[match(Solar_Res_Zip$ZIP,zip_total_house$GEOID)]
Solar_Res_Zip$Adoption_Rate <- Solar_Res_Zip$COUNT/Solar_Res_Zip$Total_Occ_House
SRP_Data <- read.csv("Original Data Files/NJBPU_SRP_Data.csv",na.string=c(NA,""," "))
TI_Data <- read.csv("Original Data Files/NJBPU_TI_Data.csv",na.string=c(NA,""," "))
ADI_Data <- read.csv("Original Data Files/NJPU_ADI_Data.csv",na.string=c(NA,""," "))
#Data Cleaning: Getting correct columns to join all datasets
#We need some key variables which are in all 3 program data, we will remove the others
col_names <- c("PROGRAM","CITY","ZIP","COUNTY_CODE","INTERCONNECTION_DATE","SYSTEM_SIZE",
"CUSTOMER_TYPE","INTERCONNECTION_TYPE","THIRD_PARTY_OWNERSHIP")
SRP_Data <- SRP_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(SRP_Data) <- col_names
TI_Data <- TI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(TI_Data) <- col_names
ADI_Data <- ADI_Data %>% select(Program, Premise.City, Premise.........................Zip,
County......................Code, PTO.Date..Interconnection.Date.,
Calculated.Total.System.Size, Customer.Type, Interconnection,
Third.Party.Ownership)
names(ADI_Data) <- col_names
#Join all the datasets to create one with all entries across all programs
#We will now perform some data cleaning on this dataset
Solar_Data0 <- rbind(SRP_Data,TI_Data,ADI_Data)
remove(SRP_Data)
remove(TI_Data)
remove(ADI_Data)
remove(col_names)
COUNTY_CODE <- c(1:21)
COUNTY <- c("Sussex","Warren","Morris","Hunterdon","Somerset","Passaic","Bergen",
"Hudson","Essex","Union","Middlesex","Mercer","Burlington","Camden",
"Gloucester","Salem","Monmouth","Ocean","Atlantic","Cumberland","Cape May")
County_Code_Conversion <- data.frame(COUNTY_CODE,COUNTY)
remove(COUNTY_CODE,COUNTY)
Solar_Data1 <- left_join(Solar_Data0,County_Code_Conversion,by=c("COUNTY_CODE"="COUNTY_CODE"))
Solar_Data1 <- Solar_Data1[c(1:4,10,5:9)]
#Reformat Zip Codes, since they're missing 0's: Not elegant but works
Solar_Data1$ZIP <- paste("0",Solar_Data1$ZIP,sep="")
Solar_Data1$ZIP[Solar_Data1$ZIP=="0NA"] <- NA
remove(County_Code_Conversion)
remove(Solar_Data0)
### STEP 3: AGGREGATE DATA AND GET FINAL DATASETS ###
#Aggregate by COUNTY for all CUSTOMER_TYPE
Solar_All_County <- Solar_Data1 %>%
group_by(COUNTY, CUSTOMER_TYPE, THIRD_PARTY_OWNERSHIP) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
#Aggregate by COUNTY for only RESIDENTIAL
Solar_Res_County <- Solar_Data1 %>%
filter(CUSTOMER_TYPE=="Residential") %>%
group_by(COUNTY) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
# #Aggregate by Zip Code for all CUSTOMER_TYPE
# #We actually won't need this table
# Solar_All_Zip <- Solar_Data1 %>%
#   group_by(ZIP,CUSTOMER_TYPE) %>%
#   summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
#Aggregate by Zip Code for only RESIDENTIAL
Solar_Res_Zip <- Solar_Data1 %>%
filter(CUSTOMER_TYPE=="Residential") %>%
group_by(ZIP) %>%
summarize(CAPACITY = sum(SYSTEM_SIZE,na.rm=TRUE), COUNT=n())
View(Solar_Res_Zip)
county_dict <- c("1" = "Sussex","2"	= "Warren","3" = "Morris","4" = "Hunterdon","5" = "Somerset","6" = "Passaic","7" = "Bergen","8" = "Hudson","9" = "Essex","10" = "Union","11" = "Middlesex","12" = "Mercer","13" = "Burlington","14" = "Camden","15" = "Gloucester","16" = "Salem","17" = "Monmouth","18" = "Ocean","19" = "Atlantic","20" = "Cumberland","21" = "Cape May")
# get county data from ACS
county_income <- get_acs(variables = "DP03_0051E", geography = "county", state = "NJ", survey = "acs5", year = 2019)
county_perc_male <- get_acs(variables = "DP05_0002PE", geography = "county", state = "NJ", survey = "acs5", year = 2019)
county_perc_white <- get_acs(variables = "DP05_0037PE", geography = "county", state = "NJ", survey = "acs5", year = 2019)
county_total_house <- get_acs(variables = "DP04_0002E", geography = "county", state = "NJ", survey = "acs5", year = 2019)
>>>>>>> Stashed changes
# add county code to county datasets
county_dict <- county_dict[order(unlist(county_dict), decreasing=FALSE)] # sort dict by county name
county_income["COUNTY_CODE"] = as.integer(names(county_dict))
county_perc_male["COUNTY_CODE"] = as.integer(names(county_dict))
county_perc_white["COUNTY_CODE"] = as.integer(names(county_dict))
county_total_house["COUNTY_CODE"] = as.integer(names(county_dict))
Solar_Res_County["COUNTY_CODE"] = as.integer(names(county_dict))
# get zip data from ACS
zip_income <- get_acs(variables = "DP03_0051E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_perc_male <- get_acs(variables = "DP05_0002PE", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_perc_white <- get_acs(variables = "DP05_0037PE", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_total_house <- get_acs(variables = "DP04_0002E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_owner_house <- get_acs(variables = "DP04_0046E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
zip_renter_house <- get_acs(variables = "DP04_0047E", geography = "zip code tabulation area", state = "NJ", survey = "acs5", year = 2019)
# combine the county demographics with solar data
<<<<<<< Updated upstream
Solar_Res_County$geometry <- county_income$geometry[match(Solar_Res_County$COUNTY_CODE,county_income$COUNTY_CODE)]
=======
>>>>>>> Stashed changes
Solar_Res_County$Income <- county_income$estimate[match(Solar_Res_County$COUNTY_CODE,county_income$COUNTY_CODE)]
Solar_Res_County$Perc_White <- county_perc_white$estimate[match(Solar_Res_County$COUNTY_CODE,county_perc_white$COUNTY_CODE)]
Solar_Res_County$Perc_Male <- county_perc_male$estimate[match(Solar_Res_County$COUNTY_CODE,county_perc_male$COUNTY_CODE)]
Solar_Res_County$Total_Occ_House <- county_total_house$estimate[match(Solar_Res_County$COUNTY_CODE,county_total_house$COUNTY_CODE)]
Solar_Res_County$Adoption_Rate <- Solar_Res_County$COUNT/Solar_Res_County$Total_Occ_House
# combine the zip demographics with solar data
Solar_Res_Zip$Income <- zip_income$estimate[match(Solar_Res_Zip$ZIP,zip_income$GEOID)]
Solar_Res_Zip$Perc_White <- zip_perc_white$estimate[match(Solar_Res_Zip$ZIP,zip_perc_white$GEOID)]
Solar_Res_Zip$Perc_Male <- zip_perc_male$estimate[match(Solar_Res_Zip$ZIP,zip_perc_male$GEOID)]
Solar_Res_Zip$Total_Occ_House <- zip_total_house$estimate[match(Solar_Res_Zip$ZIP,zip_total_house$GEOID)]
Solar_Res_Zip$Adoption_Rate <- Solar_Res_Zip$COUNT/Solar_Res_Zip$Total_Occ_House
<<<<<<< Updated upstream
# combine zip housing data
zip_total_house$Owner_Occ_Houses <- zip_owner_house$estimate[match(zip_total_house$GEOID,zip_owner_house$GEOID)]
zip_total_house$Renter_Occ_Houses <- zip_renter_house$estimate[match(zip_total_house$GEOID,zip_renter_house$GEOID)]
zip_housing <- zip_total_house %>%
rename(Total_Occ_Houses = estimate, ZIP = GEOID) %>%
subset(select = -c(NAME, variable, moe))
remove(zip_income, zip_perc_male, zip_perc_white, zip_total_house, zip_owner_house, zip_renter_house, county_dict, county_income, county_perc_male, county_perc_white, county_total_house)
setwd("~/Data Viz in R/Data-Visualization-Final-Project/Data Files for Analysis")
save('Solar_Res_County', file = 'Solar_Res + County_Census.RData')
library(tidycensus)
library(tidyverse)
library(sf)
library(viridis)
library(units)
setwd("~/Data Viz in R/Data-Visualization-Final-Project/Data Files for Analysis")
data_county <- 'Solar_Res + County_Census.RData' %>%
st_transform(3424)
data <- get_acs(
variables = "B01001_007", geography = "county", state = "NJ", survey = "acs5", year = 2020,
geometry = TRUE
View(data)
data <- get_acs(
variables = "B01001_007", geography = "county", state = "NJ", survey = "acs5", year = 2020,
geometry = TRUE
)
View(data)
data <- get_acs(
variables = "B01001_007", geography = "county", state = "NJ", survey = "acs5", year = 2020,
geometry = TRUE
) %>%
st_transform(3424)
View(data)
data <- data %>%
mutate(
area = set_units(st_area(data), mi^2),
pop_density = as.numeric(estimate / area)
)
data_county <- 'Solar_Res + County_Census.RData'
data_county <- data_county %>%
mutate(
area = set_units(st_area(data_county), mi^2)
)
data_county <- st_read(Solar_Res + County_Census.RData)
data_county <- st_read('Solar_Res + County_Census.RData')
View(Solar_Res_County)
data_county <- st_as_sf('Solar_Res + County_Census.RData')
setwd("~/Data Viz in R/Data-Visualization-Final-Project/Data Files for Analysis")
data_county <- load('Solar_Res + County_Census.RData')
ls()
data_county <- Solar_Res_County
View(data_county)
data_county <- data_county %>%
mutate(
area = set_units(st_area(data_county), mi^2)
)
data_county <- st_as_sf(Solar_Res_County)
data_county <- data_county %>%
mutate(
area = set_units(st_area(data_county), mi^2)
)
View(data_county)
plot <- data_county %>%
ggplot(aes(fill = CAPACITY)) +
geom_sf(color = NA) +
scale_fill_viridis_c(option = "magma", trans = "sqrt") +
theme(
axis.line = element_line(colour = "transparent"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
legend.text = element_text(color = "transparent"),
legend.title = element_text(color = "transparent"),
legend.position = "blank"
)
plot
plot2 <- data_county %>%
ggplot(aes(fill = COUNT)) +
geom_sf(color = NA) +
scale_fill_viridis_c(option = "magma", trans = "sqrt") +
theme(
axis.line = element_line(colour = "transparent"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
legend.text = element_text(color = "transparent"),
legend.title = element_text(color = "transparent"),
legend.position = "blank"
)
plot2
plot2
plot
plot2 <- data_county %>%
ggplot(aes(fill = COUNT)) +
geom_sf(color = NA) +
scale_fill_viridis_c() +
theme(
axis.line = element_line(colour = "transparent"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
legend.text = element_text(color = "transparent"),
legend.title = element_text(color = "transparent"),
legend.position = "blank"
)
plot2
plot2 <- data_county %>%
ggplot(aes(fill = COUNT)) +
geom_sf(color = NA) +
scale_fill_viridis_b() +
theme(
axis.line = element_line(colour = "transparent"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
legend.text = element_text(color = "transparent"),
legend.title = element_text(color = "transparent"),
legend.position = "blank"
)
plot2
plot2 <- data_county %>%
ggplot(aes(fill = COUNT)) +
geom_sf() +
scale_fill_viridis_c() +
theme(
axis.line = element_line(colour = "transparent"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
legend.text = element_text(color = "transparent"),
legend.title = element_text(color = "transparent"),
legend.position = "blank"
)
plot2
plot <- data_county %>%
ggplot(aes(fill = CAPACITY)) +
geom_sf() +
scale_fill_viridis_c() +
theme(
axis.line = element_line(colour = "transparent"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", colour = NA)
)
plot
plot <- data_county %>%
ggplot(aes(fill = CAPACITY)) +
geom_sf(color = "white") +
scale_fill_viridis_c() +
theme(
axis.line = element_line(colour = "transparent"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", colour = NA)
)
plot
View(Solar_Rates_County)
View(data_county)
View(data_county)
View(Solar_Rates_County)
total_data_county <- st_as_af(Solar_Rates_County)
total_data_county$geometry <- Solar_Res_County$geometry[match(total_data_county$COUNTY,Solar_Res_County$COUNTY)]
library(tidycensus)
library(tidyverse)
library(sf)
library(viridis)
library(units)
setwd("~/Data Viz in R/Data-Visualization-Final-Project/Data Files for Analysis")
# tab 1
total_data_county <- st_as_af(Solar_Rates_County)
total_data_county$geometry <- Solar_Res_County$geometry[match(total_data_county$COUNTY,Solar_Res_County$COUNTY)]
library(tidycensus)
library(tidyverse)
library(sf)
library(viridis)
library(units)
setwd("~/Data Viz in R/Data-Visualization-Final-Project/Data Files for Analysis")
# tab 1
total_data_county <- st_as_sf(Solar_Rates_County)
Solar_Rates_County$geometry <- Solar_Res_County$geometry[match(Solar_Rates_County$COUNTY,Solar_Res_County$COUNTY)]
total_county_data <- st_as_sf(Solar_Rates_County)
plot <- total_data_county %>%
ggplot(aes(fill = CAPACITY)) +
geom_sf(color = "white") +
scale_fill_viridis_c() +
theme(
axis.line = element_line(colour = "transparent"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", colour = NA)
)
plot
plot <- total_county_data %>%
ggplot(aes(fill = CAPACITY)) +
geom_sf(color = "white") +
scale_fill_viridis_c() +
theme(
axis.line = element_line(colour = "transparent"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", colour = NA)
)
plot
plot2 <- total_county_data %>%
ggplot(aes(fill = COUNT)) +
geom_sf() +
scale_fill_viridis_c() +
theme(
axis.line = element_line(colour = "transparent"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
legend.text = element_text(color = "transparent"),
legend.title = element_text(color = "transparent"),
legend.position = "blank"
)
plot2
View(total_county_data)
pal <- colorBin(palette = "Reds") # split colors from white to red into 9 even bins
leaflet() %>%
addPolygon(data = total_county_data,
label= ~CAPACITY, # when you hover over the polygon, it will label the svi
color = "gray", # the color of the border
fillColor = ~pal(total_county_data$CAPACITY), # the colors inside the polygons
weight = 1.0, # the thickness of the border lines
opacity = 1.0, # the transparency of the border lines
fillOpacity = 0.8) # the transparency inside the polygons) %>%
pal <- colorBin(palette = "Reds") # split colors from white to red into 9 even bins
leaflet() %>%
addPolygons(data = total_county_data,
label= ~CAPACITY, # when you hover over the polygon, it will label the svi
color = "gray", # the color of the border
fillColor = ~pal(total_county_data$CAPACITY), # the colors inside the polygons
weight = 1.0, # the thickness of the border lines
opacity = 1.0, # the transparency of the border lines
fillOpacity = 0.8) # the transparency inside the polygons) %>%
library(RColorBrewer)
library(leaflet)
install.packages("leaflet")
library(RColorBrewer)
library(leaflet)
pal <- colorBin(palette = "Reds") # split colors from white to red into 9 even bins
leaflet() %>%
addPolygons(data = total_county_data,
label= ~CAPACITY, # when you hover over the polygon, it will label the svi
color = "gray", # the color of the border
fillColor = ~pal(total_county_data$CAPACITY), # the colors inside the polygons
weight = 1.0, # the thickness of the border lines
opacity = 1.0, # the transparency of the border lines
fillOpacity = 0.8) # the transparency inside the polygons) %>%
leaflet() %>%
addPolygons(data = total_county_data) # the transparency inside the polygons) %>%
library(RColorBrewer)
pal <- colorBin(palette = "Reds") # split colors from white to red into 9 even bins
pal <- colorBin(palette = "Reds", domain = total_county_data$CAPACITY) # split colors from white to red into 9 even bins
leaflet() %>%
addPolygons(data = total_county_data,
label= ~CAPACITY, # when you hover over the polygon, it will label the svi
color = "gray", # the color of the border
fillColor = ~pal(total_county_data$CAPACITY), # the colors inside the polygons
weight = 1.0, # the thickness of the border lines
opacity = 1.0, # the transparency of the border lines
fillOpacity = 0.8) # the transparency inside the polygons) %>%
leaflet() %>%
addPolygons(data = total_county_data,
label= ~c(COUNTY,CAPACITY), # when you hover over the polygon, it will label the svi
color = "gray", # the color of the border
fillColor = ~pal(total_county_data$CAPACITY), # the colors inside the polygons
weight = 1.0, # the thickness of the border lines
opacity = 1.0, # the transparency of the border lines
fillOpacity = 0.8) # the transparency inside the polygons) %>%
leaflet() %>%
addPolygons(data = total_county_data,
label= ~COUNTY, # when you hover over the polygon, it will label the svi
color = "gray", # the color of the border
fillColor = ~pal(total_county_data$CAPACITY), # the colors inside the polygons
weight = 1.0, # the thickness of the border lines
opacity = 1.0, # the transparency of the border lines
fillOpacity = 0.8) # the transparency inside the polygons) %>%
leaflet() %>%
addPolygons(data = total_county_data,
label= ~COUNTY, # when you hover over the polygon, it will label the svi
color = "gray", # the color of the border
fillColor = ~pal(total_county_data$CAPACITY), # the colors inside the polygons
weight = 1.0, # the thickness of the border lines
opacity = 1.0, # the transparency of the border lines
fillOpacity = 0.8) %>%
addLegend(data= total_county_data, # the dataset
"bottomright", # where to put the legend
pal=pal, values = ~CAPACITY, # specify the color palette and the range of values
title="Capacity", # legend title
opacity = 1.0) # the transparency of the legend
pal2 <- colorBin(palette = "Reds", domain = data_county$CAPACITY) # split colors from white to red into 9 even bins
leaflet() %>%
addPolygons(data = data_county,
label= ~COUNTY, # when you hover over the polygon, it will label the svi
color = "gray", # the color of the border
fillColor = ~pal(data_county$CAPACITY), # the colors inside the polygons
weight = 1.0, # the thickness of the border lines
opacity = 1.0, # the transparency of the border lines
fillOpacity = 0.8) %>%
addLegend(data= data_county, # the dataset
"bottomright", # where to put the legend
pal=pal, values = ~CAPACITY, # specify the color palette and the range of values
title="Capacity", # legend title
opacity = 1.0) # the transparency of the legend
pal3 <- colorBin(palette = "Reds", domain = data_county$Adoption_Rate) # split colors from white to red into 9 even bins
leaflet() %>%
addPolygons(data = data_county,
label= ~COUNTY, # when you hover over the polygon, it will label the svi
color = "gray", # the color of the border
fillColor = ~pal(data_county$Adoption_Rate), # the colors inside the polygons
weight = 1.0, # the thickness of the border lines
opacity = 1.0, # the transparency of the border lines
fillOpacity = 0.8) %>%
addLegend(data= data_county, # the dataset
"bottomright", # where to put the legend
pal=pal, values = ~Adoption_Rate, # specify the color palette and the range of values
title="Capacity", # legend title
opacity = 1.0) # the transparency of the legend
leaflet() %>%
addPolygons(data = data_county,
label= ~COUNTY, # when you hover over the polygon, it will label the svi
color = "gray", # the color of the border
fillColor = ~pal(data_county$Adoption_Rate), # the colors inside the polygons
weight = 1.0, # the thickness of the border lines
opacity = 1.0, # the transparency of the border lines
fillOpacity = 0.8) %>%
addLegend(data= data_county$Adoption_Rate, # the dataset
"bottomright", # where to put the legend
pal=pal, values = ~Adoption_Rate, # specify the color palette and the range of values
title="Adoption Rates", # legend title
opacity = 1.0) # the transparency of the legend
# tab 3
pal3 <- colorBin(palette = "Reds", domain = data_county$Adoption_Rate) # split colors from white to red into 9 even bins
leaflet() %>%
addPolygons(data = data_county,
label= ~COUNTY, # when you hover over the polygon, it will label the svi
color = "gray", # the color of the border
fillColor = ~pal3(data_county$Adoption_Rate), # the colors inside the polygons
weight = 1.0, # the thickness of the border lines
opacity = 1.0, # the transparency of the border lines
fillOpacity = 0.8) %>%
addLegend(data= data_county, # the dataset
"bottomright", # where to put the legend
pal=pal3, values = ~Adoption_Rate, # specify the color palette and the range of values
title="Adoption Rates", # legend title
opacity = 1.0) # the transparency of the legend
pal2 <- colorBin(palette = "Reds", domain = data_county$CAPACITY) # split colors from white to red into 9 even bins
leaflet() %>%
addPolygons(data = data_county,
label= ~COUNTY, # when you hover over the polygon, it will label the svi
color = "gray", # the color of the border
fillColor = ~pal2(data_county$CAPACITY), # the colors inside the polygons
weight = 1.0, # the thickness of the border lines
opacity = 1.0, # the transparency of the border lines
fillOpacity = 0.8) %>%
addLegend(data= data_county, # the dataset
"bottomright", # where to put the legend
pal=pal2, values = ~CAPACITY, # specify the color palette and the range of values
title="Capacity", # legend title
opacity = 1.0) # the transparency of the legend
library(esquisse)
esquisse::esquisser(Solar_Res_County, viewer = "browser")
esquisse::esquisser(Solar_Res_Zip, viewer = "browser")
esquisse::esquisser(Solar_Res_Zip, viewer = "browser")
pal3 <- colorBin(palette = "Reds", domain = data_county$Adoption_Rate) # split colors from white to red into 9 even bins
leaflet() %>%
addPolygons(data = data_county,
label= ~COUNTY, # when you hover over the polygon, it will label the svi
color = "gray", # the color of the border
fillColor = ~pal3(data_county$Adoption_Rate), # the colors inside the polygons
weight = 1.0, # the thickness of the border lines
opacity = 1.0, # the transparency of the border lines
fillOpacity = 0.8) %>%
addLegend(data= data_county, # the dataset
"bottomright", # where to put the legend
pal=pal3, values = ~Adoption_Rate, # specify the color palette and the range of values
title="Adoption Rates", # legend title
opacity = 1.0) # the transparency of the legend
esquisse::esquisser(Solar_Res_Zip, viewer = "browser")
=======
View(Solar_Res_Zip)
View(Solar_Res_County)
# remove census datasets from global environment
remove(zip_income, zip_perc_male, zip_perc_white, zip_total_house, zip_owner_house, zip_renter_house, county_dict, county_income, county_perc_male, county_perc_white, county_total_house)
setwd("~/Data Viz in R/Data-Visualization-Final-Project/Data Files for Analysis")
write.csv(Solar_Res_Zip,"Solar + Census Data - ZIP.csv", row.names = TRUE)
write.csv(Solar_Res_County,"Solar + Census Data - COUNTY.csv", row.names = TRUE)
setwd("~/PI Studio/PI-Studio-Final-Project/Exploratory Data Analysis")
setwd("~/PI Studio/PI-Studio-Final-Project/Dataset")
# import libraries
library(tidyverse)
# import dataset
setwd("~/PI Studio/PI-Studio-Final-Project/Dataset")
data <- read_csv('Yelp Dataset Shortened.csv')
setwd("~/PI Studio/PI-Studio-Final-Project/Exploratory Data Analysis")
# import libraries
library(tidyverse)
# import dataset
setwd("~/PI Studio/PI-Studio-Final-Project/Dataset")
data <- read_csv('Yelp Dataset Shortened.csv')
View(data)
View(data)
data %>%
group_by(business_id)
group_by_bus <- data %>%
group_by(business_id)
View(group_by_bus)
remove(group_by_bus, MODIV_County, MODIV_Data_Flat, MODIV_ZIP, Solar_All_County, Solar_Data1, Solar_Rates_County, Solar_Rates_Zip, Solar_Res_County, Solar_Res_Zip)
data[, .(rowCount = .N), by = business_id]
data[,(rowCount = N), by = business_id]
count(data,c('business_id'))
review_data <- data.frame(aggregate(data, by= business_id, FUN=sum))
aggregate(data, by= business_id, FUN=sum)
aggregate(data, by= data$business_id, FUN=sum)
aggregate(data, by= c(business_id), FUN=sum)
aggregate(data, by= c('business_id'), FUN=sum)
data %>%
group_by(business_id) %>%
count()
data %>%
group_by(business_id) %>%
count() %>%
arrange(desc(n))
reviews_per_restaurant <- data %>%
group_by(business_id) %>%
count() %>%
arrange(desc(n))
View(reviews_per_restaurant)
unique(data$categories)
categories <- c()
for (row in data){
append(row$categories, categories)
}
categories <- c()
for (i in 1:nrow(data)){
append(i$categories, categories)
}
categories <- c()
for (i in 1:nrow(data)){
append(data$categories, categories)
}
setwd("~/PI Studio/PI-Studio-Final-Project/Exploratory Data Analysis")
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(tidyverse)
# import dataset
setwd("~/PI Studio/PI-Studio-Final-Project/Dataset")
data <- read_csv('Yelp Dataset Shortened.csv')
# get reviews per restaurants
reviews_per_restaurant <- data %>%
group_by(business_id) %>%
count() %>%
arrange(desc(n))
reticulate::repl_python()
categories = []
reticulate::repl_python()
categories = []
remove(categories, i, row)
reticulate::repl_python()
categories = []
install.packages('reticulate')
Sys.which("python")
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
use_python("C:\\Users\\lcruz\\AppData\\Local\\MICROS~1\\WINDOW~1\\python.exe")
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
categories = []
no
>>>>>>> Stashed changes
